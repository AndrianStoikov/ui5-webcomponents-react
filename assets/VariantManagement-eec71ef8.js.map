{"version":3,"file":"VariantManagement-eec71ef8.js","sources":["../../packages/main/src/components/VariantManagement/VariantManagement.mdx"],"sourcesContent":["import { ControlsWithNote, DocsHeader, Footer } from '@sb/components';\nimport SubcomponentsSection from '@sb/docs/SubcomponentsSection.md?raw';\nimport { ArgTypes, Canvas, Description, Markdown, Meta } from '@storybook/blocks';\nimport { MessageStrip } from '../../webComponents/index';\nimport { VariantItem } from './VariantItem';\nimport * as ComponentStories from './VariantManagement.stories';\n\n<Meta of={ComponentStories} />\n\n<DocsHeader />\n\n<br />\n\n## Example\n\n<Canvas of={ComponentStories.Default} />\n\n## Properties\n\n<ControlsWithNote of={ComponentStories.Default} />\n\n# More Examples\n\n## VariantManagement with custom Input\n\nYou can customize the inputs inside the configuration dialogs (\"Save View\" and \"Manage Views\") by leveraging the corresponding `inputProps` prop (`saveViewInputProps` and `manageViewsInputProps`) of the `VariantItem` component.\nThese props accept props of the `Input` component with which you are able to overwrite internal implementations. E.g. `valueState` and `valueState` message.\n\n**Note:** To prevent internal logic from being executed on save click, you can mark the `onInput` event of the corresponding `Input` component as invalid by setting `event.isInvalid = true` inside the respective handler.\n\n<MessageStrip hideCloseButton>It is possible to overwrite internally used props. Please use with caution!</MessageStrip>\n\n<Canvas of={ComponentStories.WithCustomValidation} sourceState=\"none\" />\n\n**Code Example**\n\n<details style={{ marginBlockEnd: \"2rem\" }}>\n\n<summary>Show Code</summary>\n\n```jsx\nexport const VariantManagementWithCustomValidation = () => {\n  const [valueStateSaveView, setValueStateSaveView] = useState(undefined);\n  const [customSaveViewVariantText, setCustomSaveViewVariantText] = useState(\n    'Only alphanumeric chars in Save View input'\n  );\n  const [valueStateManageViews, setValueStateManageViews] = useState(undefined);\n  const [customManageViewsVariantText, setCustomManageViewsVariantText] = useState('Max 12 chars');\n\n  const handleSaveViewInput = (e) => {\n    // only allow alphanumeric and space characters\n    if (!e.target.value.match(/^[a-z0-9\\s]+$/i)) {\n      // mark variant as invalid (prevent internal logic from being applied)\n      e.isInvalid = true;\n      setValueStateSaveView(ValueState.Error);\n    } else {\n      // mark variant as valid again\n      e.isInvalid = false;\n      setValueStateSaveView(undefined);\n    }\n  };\n  const handleSaveAs = (e) => {\n    setCustomSaveViewVariantText(e.detail.children);\n  };\n\n  const handleManageViewInput = (e) => {\n    // only 12 or fewer characters\n    if (e.target.value.length > 12) {\n      // mark variant as invalid (prevent internal logic from being applied)\n      e.isInvalid = true;\n      setValueStateManageViews(ValueState.Error);\n    } else {\n      // mark variant as valid again\n      e.isInvalid = false;\n      setValueStateManageViews(undefined);\n    }\n  };\n  const handleSaveManageViews = (e) => {\n    // if is custom manage view variant and is not in error state, set children to new value\n    const isCustomManageViewsItem = e.detail.updatedVariants.find((item) => item['data-custom-manage-views']);\n    if (!valueStateManageViews && isCustomManageViewsItem) {\n      setCustomManageViewsVariantText(isCustomManageViewsItem.children);\n    }\n  };\n  return (\n    <VariantManagement onSaveAs={handleSaveAs} onSaveManageViews={handleSaveManageViews}>\n      <VariantItem\n        data-custom-save-view\n        saveViewInputProps={{\n          valueState: valueStateSaveView,\n          valueStateMessage: valueStateSaveView ? (\n            <div>Only alphanumeric and space characters allowed!</div>\n          ) : undefined,\n          onInput: handleSaveViewInput\n        }}\n      >\n        {customSaveViewVariantText}\n      </VariantItem>\n      <VariantItem\n        data-custom-manage-views\n        selected\n        manageViewsInputProps={{\n          valueState: valueStateManageViews,\n          valueStateMessage: valueStateManageViews ? <div>No more than 12 characters allowed!</div> : undefined,\n          onInput: handleManageViewInput\n        }}\n      >\n        {customManageViewsVariantText}\n      </VariantItem>\n    </VariantManagement>\n  );\n};\n```\n\n</details>\n\n<Markdown>{SubcomponentsSection}</Markdown>\n\n## VariantItem\n\n<Description of={VariantItem} />\n\n<ArgTypes of={VariantItem} />\n\n<Footer />\n"],"names":["MDXContent","props","MDXLayout","_provideComponents","_jsx","_createMdxContent","_components","_jsxs","_Fragment","Meta","ComponentStories","DocsHeader","Canvas","ComponentStories.Default","ControlsWithNote","MessageStrip","ComponentStories.WithCustomValidation","Markdown","SubcomponentsSection","Description","VariantItem","ArgTypes","Footer"],"mappings":"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"}