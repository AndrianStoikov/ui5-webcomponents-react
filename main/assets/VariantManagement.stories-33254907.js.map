{"version":3,"file":"VariantManagement.stories-33254907.js","sources":["../../packages/main/src/components/VariantManagement/VariantManagement.stories.tsx"],"sourcesContent":["import type { Meta, StoryObj } from '@storybook/react';\nimport { useState } from 'react';\nimport { PopoverPlacementType, TitleLevel, ValueState } from '../../enums/index.js';\nimport { VariantItem } from './VariantItem.js';\nimport { VariantManagement } from './index.js';\nconst meta = ({\n  title: 'Inputs / VariantManagement',\n  component: VariantManagement,\n  args: {\n    placement: PopoverPlacementType.Bottom,\n    level: TitleLevel.H4\n  }\n} satisfies Meta<typeof VariantManagement>);\nexport default meta;\ntype Story = StoryObj<typeof meta>;\nexport const Default: Story = {\n  render: args => {\n    return <VariantManagement {...args}>\n        <VariantItem>Default VariantItem</VariantItem>\n        <VariantItem selected>Selected</VariantItem>\n        <VariantItem author=\"SAP\">Author</VariantItem>\n        <VariantItem favorite>Favorite</VariantItem>\n        <VariantItem isDefault>IsDefault</VariantItem>\n        <VariantItem favorite labelReadOnly>\n          Favorite & labelReadOnly\n        </VariantItem>\n        <VariantItem applyAutomatically>ApplyAutomatically</VariantItem>\n        <VariantItem readOnly>ReadOnly</VariantItem>\n        <VariantItem global>Global</VariantItem>\n        <VariantItem global readOnly>\n          Global & readOnly\n        </VariantItem>\n        <VariantItem global>{`Not deletable -> global`}</VariantItem>\n        <VariantItem hideDelete>{`Not deletable -> hideDelete`}</VariantItem>\n        <VariantItem hideDelete={false} global>\n          {`Deletable -> hideDelete: false, global: true`}\n        </VariantItem>\n      </VariantManagement>;\n  }\n};\nexport const WithCustomValidation: Story = {\n  render: ({\n    selectedByIndex = 1\n  }: any) => {\n    const [valueStateSaveView, setValueStateSaveView] = useState(undefined);\n    const [customSaveViewVariantText, setCustomSaveViewVariantText] = useState('Only alphanumeric chars in Save View input');\n    const [valueStateManageViews, setValueStateManageViews] = useState(undefined);\n    const [customManageViewsVariantText, setCustomManageViewsVariantText] = useState('Max 12 chars');\n    const handleSaveViewInput = e => {\n      // only allow alphanumeric and space characters\n      if (!e.target.value.match(/^[a-z0-9\\s]+$/i)) {\n        // mark variant as invalid (prevent internal logic from being applied)\n        e.isInvalid = true;\n        setValueStateSaveView(ValueState.Error);\n      } else {\n        // mark variant as valid again\n        e.isInvalid = false;\n        setValueStateSaveView(undefined);\n      }\n    };\n    const handleSaveAs = e => {\n      setCustomSaveViewVariantText(e.detail.children);\n    };\n    const handleManageViewInput = e => {\n      // only 12 or fewer characters\n      if (e.target.value.length > 12) {\n        // mark variant as invalid (prevent internal logic from being applied)\n        e.isInvalid = true;\n        setValueStateManageViews(ValueState.Error);\n      } else {\n        // mark variant as valid again\n        e.isInvalid = false;\n        setValueStateManageViews(undefined);\n      }\n    };\n    const handleSaveManageViews = e => {\n      // if is custom manage view variant and is not in error state, set children to new value\n      const isCustomManageViewsItem = e.detail.updatedVariants.find(item => item['data-custom-manage-views']);\n      if (!valueStateManageViews && isCustomManageViewsItem) {\n        setCustomManageViewsVariantText(isCustomManageViewsItem.children);\n      }\n    };\n    return <VariantManagement onSaveAs={handleSaveAs} onSaveManageViews={handleSaveManageViews}>\n        <VariantItem data-custom-save-view selected={selectedByIndex === 0} saveViewInputProps={{\n        valueState: valueStateSaveView,\n        valueStateMessage: valueStateSaveView ? <div>Only alphanumeric and space characters allowed!</div> : undefined,\n        onInput: handleSaveViewInput,\n        // @ts-expect-error: data- attributes are allowed on Input\n        'data-testid': 'alphanumeric'\n      }}>\n          {customSaveViewVariantText}\n        </VariantItem>\n        <VariantItem data-custom-manage-views selected={selectedByIndex === 1} manageViewsInputProps={{\n        valueState: valueStateManageViews,\n        valueStateMessage: valueStateManageViews ? <div>No more than 12 characters allowed!</div> : undefined,\n        onInput: handleManageViewInput,\n        // @ts-expect-error: data- attributes are allowed on Input\n        'data-testid': '12chars'\n      }}>\n          {customManageViewsVariantText}\n        </VariantItem>\n      </VariantManagement>;\n  }\n};\nDefault.parameters = {\n  ...Default.parameters,\n  docs: {\n    ...Default.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  render: args => {\\n    return <VariantManagement {...args}>\\n        <VariantItem>Default VariantItem</VariantItem>\\n        <VariantItem selected>Selected</VariantItem>\\n        <VariantItem author=\\\"SAP\\\">Author</VariantItem>\\n        <VariantItem favorite>Favorite</VariantItem>\\n        <VariantItem isDefault>IsDefault</VariantItem>\\n        <VariantItem favorite labelReadOnly>\\n          Favorite & labelReadOnly\\n        </VariantItem>\\n        <VariantItem applyAutomatically>ApplyAutomatically</VariantItem>\\n        <VariantItem readOnly>ReadOnly</VariantItem>\\n        <VariantItem global>Global</VariantItem>\\n        <VariantItem global readOnly>\\n          Global & readOnly\\n        </VariantItem>\\n        <VariantItem global>{`Not deletable -> global`}</VariantItem>\\n        <VariantItem hideDelete>{`Not deletable -> hideDelete`}</VariantItem>\\n        <VariantItem hideDelete={false} global>\\n          {`Deletable -> hideDelete: false, global: true`}\\n        </VariantItem>\\n      </VariantManagement>;\\n  }\\n}\",\n      ...Default.parameters?.docs?.source\n    }\n  }\n};\nWithCustomValidation.parameters = {\n  ...WithCustomValidation.parameters,\n  docs: {\n    ...WithCustomValidation.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  render: ({\\n    selectedByIndex = 1\\n  }: any) => {\\n    const [valueStateSaveView, setValueStateSaveView] = useState(undefined);\\n    const [customSaveViewVariantText, setCustomSaveViewVariantText] = useState('Only alphanumeric chars in Save View input');\\n    const [valueStateManageViews, setValueStateManageViews] = useState(undefined);\\n    const [customManageViewsVariantText, setCustomManageViewsVariantText] = useState('Max 12 chars');\\n    const handleSaveViewInput = e => {\\n      // only allow alphanumeric and space characters\\n      if (!e.target.value.match(/^[a-z0-9\\\\s]+$/i)) {\\n        // mark variant as invalid (prevent internal logic from being applied)\\n        e.isInvalid = true;\\n        setValueStateSaveView(ValueState.Error);\\n      } else {\\n        // mark variant as valid again\\n        e.isInvalid = false;\\n        setValueStateSaveView(undefined);\\n      }\\n    };\\n    const handleSaveAs = e => {\\n      setCustomSaveViewVariantText(e.detail.children);\\n    };\\n    const handleManageViewInput = e => {\\n      // only 12 or fewer characters\\n      if (e.target.value.length > 12) {\\n        // mark variant as invalid (prevent internal logic from being applied)\\n        e.isInvalid = true;\\n        setValueStateManageViews(ValueState.Error);\\n      } else {\\n        // mark variant as valid again\\n        e.isInvalid = false;\\n        setValueStateManageViews(undefined);\\n      }\\n    };\\n    const handleSaveManageViews = e => {\\n      // if is custom manage view variant and is not in error state, set children to new value\\n      const isCustomManageViewsItem = e.detail.updatedVariants.find(item => item['data-custom-manage-views']);\\n      if (!valueStateManageViews && isCustomManageViewsItem) {\\n        setCustomManageViewsVariantText(isCustomManageViewsItem.children);\\n      }\\n    };\\n    return <VariantManagement onSaveAs={handleSaveAs} onSaveManageViews={handleSaveManageViews}>\\n        <VariantItem data-custom-save-view selected={selectedByIndex === 0} saveViewInputProps={{\\n        valueState: valueStateSaveView,\\n        valueStateMessage: valueStateSaveView ? <div>Only alphanumeric and space characters allowed!</div> : undefined,\\n        onInput: handleSaveViewInput,\\n        // @ts-expect-error: data- attributes are allowed on Input\\n        'data-testid': 'alphanumeric'\\n      }}>\\n          {customSaveViewVariantText}\\n        </VariantItem>\\n        <VariantItem data-custom-manage-views selected={selectedByIndex === 1} manageViewsInputProps={{\\n        valueState: valueStateManageViews,\\n        valueStateMessage: valueStateManageViews ? <div>No more than 12 characters allowed!</div> : undefined,\\n        onInput: handleManageViewInput,\\n        // @ts-expect-error: data- attributes are allowed on Input\\n        'data-testid': '12chars'\\n      }}>\\n          {customManageViewsVariantText}\\n        </VariantItem>\\n      </VariantManagement>;\\n  }\\n}\",\n      ...WithCustomValidation.parameters?.docs?.source\n    }\n  }\n};"],"names":["meta","VariantManagement","PopoverPlacementType","TitleLevel","Default","args","jsxs","jsx","VariantItem","WithCustomValidation","selectedByIndex","valueStateSaveView","setValueStateSaveView","useState","customSaveViewVariantText","setCustomSaveViewVariantText","valueStateManageViews","setValueStateManageViews","customManageViewsVariantText","setCustomManageViewsVariantText","e","isCustomManageViewsItem","item","ValueState","_a","_c","_b"],"mappings":"uQAKA,MAAMA,EAAQ,CACZ,MAAO,6BACP,UAAWC,EACX,KAAM,CACJ,UAAWC,EAAqB,OAChC,MAAOC,EAAW,EACpB,CACF,EAGaC,EAAiB,CAC5B,OAAgBC,GACPC,EAACL,EAAmB,CAAA,GAAGI,EAC1B,SAAA,CAAAE,EAACC,GAAY,SAAmB,qBAAA,CAAA,EAC/BD,EAAAC,EAAA,CAAY,SAAQ,GAAC,SAAQ,WAAA,EAC7BD,EAAAC,EAAA,CAAY,OAAO,MAAM,SAAM,SAAA,EAC/BD,EAAAC,EAAA,CAAY,SAAQ,GAAC,SAAQ,WAAA,EAC7BD,EAAAC,EAAA,CAAY,UAAS,GAAC,SAAS,YAAA,IAC/BA,EAAY,CAAA,SAAQ,GAAC,cAAa,GAAC,SAEpC,2BAAA,EACCD,EAAAC,EAAA,CAAY,mBAAkB,GAAC,SAAkB,qBAAA,EACjDD,EAAAC,EAAA,CAAY,SAAQ,GAAC,SAAQ,WAAA,EAC7BD,EAAAC,EAAA,CAAY,OAAM,GAAC,SAAM,SAAA,IACzBA,EAAY,CAAA,OAAM,GAAC,SAAQ,GAAC,SAE7B,oBAAA,EACCD,EAAAC,EAAA,CAAY,OAAM,GAAE,SAA0B,0BAAA,EAC9CD,EAAAC,EAAA,CAAY,WAAU,GAAE,SAA8B,8BAAA,IACtDA,EAAY,CAAA,WAAY,GAAO,OAAM,GACnC,SACH,+CAAA,CACF,CAAA,CAAA,CAEN,EACaC,EAA8B,CACzC,OAAQ,CAAC,CACP,gBAAAC,EAAkB,CAAA,IACT,CACT,KAAM,CAACC,EAAoBC,CAAqB,EAAIC,EAAAA,SAAS,MAAS,EAChE,CAACC,EAA2BC,CAA4B,EAAIF,WAAS,4CAA4C,EACjH,CAACG,EAAuBC,CAAwB,EAAIJ,EAAAA,SAAS,MAAS,EACtE,CAACK,EAA8BC,CAA+B,EAAIN,WAAS,cAAc,EAmC/F,OAAQP,EAAAL,EAAA,CAAkB,SAtBAmB,GAAA,CACKL,EAAAK,EAAE,OAAO,QAAQ,CAAA,EAqBE,kBAPfA,GAAA,CAE3B,MAAAC,EAA0BD,EAAE,OAAO,gBAAgB,KAAaE,GAAAA,EAAK,0BAA0B,CAAC,EAClG,CAACN,GAAyBK,GAC5BF,EAAgCE,EAAwB,QAAQ,CAClE,EAGE,SAAA,CAAAd,EAACC,GAAY,wBAAqB,GAAC,SAAUE,IAAoB,EAAG,mBAAoB,CACxF,WAAYC,EACZ,kBAAmBA,EAAsBJ,EAAA,MAAA,CAAI,2DAA+C,EAAS,OACrG,QAtC6Ba,GAAA,CAE1BA,EAAE,OAAO,MAAM,MAAM,gBAAgB,GAMxCA,EAAE,UAAY,GACdR,EAAsB,MAAS,IAL/BQ,EAAE,UAAY,GACdR,EAAsBW,EAAW,KAAK,EAKxC,EA8BE,cAAe,cAAA,EAEZ,SACHT,EAAA,IACCN,EAAY,CAAA,2BAAwB,GAAC,SAAUE,IAAoB,EAAG,sBAAuB,CAC9F,WAAYM,EACZ,kBAAmBA,EAAyBT,EAAA,MAAA,CAAI,+CAAmC,EAAS,OAC5F,QAhC+Ba,GAAA,CAE7BA,EAAE,OAAO,MAAM,OAAS,IAE1BA,EAAE,UAAY,GACdH,EAAyBM,EAAW,KAAK,IAGzCH,EAAE,UAAY,GACdH,EAAyB,MAAS,EACpC,EAwBE,cAAe,SAAA,EAEZ,SACHC,EAAA,CACF,CAAA,CAAA,CACJ,CACF,YACAd,EAAQ,WAAa,CACnB,GAAGA,EAAQ,WACX,KAAM,CACJ,IAAGoB,EAAApB,EAAQ,aAAR,YAAAoB,EAAoB,KACvB,OAAQ,CACN,eAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAChB,IAAGC,GAAAC,EAAAtB,EAAQ,aAAR,YAAAsB,EAAoB,OAApB,YAAAD,EAA0B,MAC/B,CACF,CACF,YACAhB,EAAqB,WAAa,CAChC,GAAGA,EAAqB,WACxB,KAAM,CACJ,IAAGe,EAAAf,EAAqB,aAArB,YAAAe,EAAiC,KACpC,OAAQ,CACN,eAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAChB,IAAGC,GAAAC,EAAAjB,EAAqB,aAArB,YAAAiB,EAAiC,OAAjC,YAAAD,EAAuC,MAC5C,CACF,CACF"}