import{j as n,a as V}from"./jsx-runtime-670450c2.js";import{T as D}from"./ThemingParameters-f4b4144e.js";import{e as se}from"./index-99d317a4.js";import{r as w}from"./index-f1f749bf.js";import{a as le,g as z,d as q}from"./defaults-253bd373.js";import{u as ce,B as de}from"./useCancelAnimationFallback-8fe5f095.js";import{u as he,a as ue,C as pe,X as I,c as T,Y as me,b as fe}from"./YAxisTicks-f5bd2407.js";import{u as ge,C as be}from"./ChartDataLabel-18377fd6.js";import{u as ye,t as Ce,a as ve,b as ke}from"./staticProps-9dd6f0f9.js";import{b as Ae,u as we,a as xe,r as Le,g as B}from"./useTooltipFormatter-b82b4038.js";import{u as _e}from"./useOnClickInternal-d27d7c1e.js";import{a as Pe}from"./react-content-loader.es-ba84896a.js";import{B as Se}from"./Placeholder-f009fbef.js";import{B as Ve,b as De,C as Ie,L as Te,R as Be,T as ze,a as qe}from"./generateCategoricalChart-789087f3.js";import{u as Oe}from"./withWebComponent-63dd52a0.js";import{u as Ye}from"./useIsRTL-fcdcb328.js";const Re=(s,c)=>w.useMemo(()=>{let d=Array(c.length).fill(0),r=0;if(s instanceof Array&&c){const y=i=>c.map(l=>l.formatter(z(i,l.accessor,"")));s.map(y).forEach(i=>{i.forEach((l,u)=>{d[u]=Math.max(Ae(l),d[u])})}),d=d.map(i=>Math.min(le,i)),r=d.reduce((i,l)=>i+l,0)}return[d,{marginLeft:r,maxWidth:`calc(100% - ${r+8}px)`}]},[s,c]),je={formatter:q},Fe={formatter:q,opacity:1},Ee=s=>({payload:c})=>z(c,s),b=w.forwardRef((s,c)=>{var P,S;const{loading:d,dataset:r,noLegend:y,noAnimation:C,tooltipConfig:i,onDataPointClick:l,onLegendClick:u,onClick:x,style:O,className:Y,slot:R,syncId:j,ChartPlaceholder:F,children:E,...N}=s,t={margin:{},yAxisVisible:!0,xAxisVisible:!0,gridStroke:D.sapList_BorderColor,gridHorizontal:!0,gridVertical:!1,legendPosition:"bottom",legendHorizontalAlign:"left",barGap:3,zoomingTool:!1,resizeDebounce:250,yAxisConfig:{},xAxisConfig:{},secondXAxisConfig:{},...s.chartConfig},a=t.referenceLine,{dimensions:v,measures:p}=we(s.dimensions,s.measures,je,Fe),K=xe(p),h=v[0],{primaryMeasure:m,secondaryMeasure:M}=Le(p,(P=t==null?void 0:t.secondYAxis)==null?void 0:P.dataKey),H=p.map(({accessor:e})=>e),k=t.secondYAxis?H.findIndex(e=>{var o;return e===((o=t.secondYAxis)==null?void 0:o.dataKey)}):0,[W,L]=Oe(c),$=ye(u),X=ge(h),G=w.useCallback((e,o,f)=>{if(e&&l){const g=e.value.length?e.value[1]-e.value[0]:e.value;l(se(f,{dataKey:Object.keys(e).filter(A=>A!=="value").find(A=>e[A]===g),value:g,payload:e.payload,dataIndex:o}))}},[l]),U=_e(x),J=(r==null?void 0:r.length)>30,Q=h==null?void 0:h.accessor,[Z,ee]=Re(r,v),te=he(t.margin,t.zoomingTool),[ae]=ue(L,1),_=Ye(L),{isMounted:oe,handleBarAnimationStart:ne,handleBarAnimationEnd:re}=ce(C),{chartConfig:Ne,dimensions:Ke,measures:Me,...ie}=N;return n(Pe,{dataset:r,loading:d,Placeholder:F??Se,ref:W,style:O,className:Y,slot:R,resizeDebounce:t.resizeDebounce,...ie,children:V(de,{syncId:j,onClick:U,stackOffset:"sign",margin:te,layout:"vertical",data:r,barGap:t.barGap,className:typeof l=="function"||typeof x=="function"?"has-click-handler":void 0,children:[n(pe,{vertical:t.gridVertical,horizontal:t.gridHorizontal,stroke:t.gridStroke}),t.xAxisVisible&&n(I,{interval:0,type:"number",tick:n(T,{config:m}),axisLine:t.xAxisVisible,tickLine:Ce,tickFormatter:m==null?void 0:m.formatter,height:ae,reversed:_,...t.xAxisConfig}),((S=t.secondYAxis)==null?void 0:S.dataKey)&&n(I,{dataKey:t.secondYAxis.dataKey,axisLine:{stroke:t.secondYAxis.color??`var(--sapChart_OrderedColor_${k%11+1})`},tick:n(T,{config:M,secondYAxisConfig:{color:t.secondYAxis.color??`var(--sapChart_OrderedColor_${k%11+1})`}}),tickLine:{stroke:t.secondYAxis.color??`var(--sapChart_OrderedColor_${k%11+1})`},label:{value:t.secondYAxis.name,offset:2,angle:90,position:"center"},orientation:"top",interval:0,xAxisId:"secondary",type:"number",...t.secondXAxisConfig}),t.yAxisVisible&&v.map((e,o)=>n(me,{interval:(e==null?void 0:e.interval)??(J?"preserveStart":0),type:"category",dataKey:e.accessor,tick:n(fe,{config:e}),tickLine:o<1,axisLine:o<1,yAxisId:o,width:Z[o],allowDuplicatedCategory:o===0,orientation:_?"right":"left",...t.yAxisConfig},e.accessor)),oe&&p.map((e,o)=>V(Ve,{stackId:e.stackId,fillOpacity:e.opacity,name:e.label??e.accessor,strokeOpacity:e.opacity,type:"monotone",dataKey:e.accessor,fill:e.color??`var(--sapChart_OrderedColor_${o%11+1})`,stroke:e.color??`var(--sapChart_OrderedColor_${o%11+1})`,barSize:e.width,onClick:G,isAnimationActive:C===!1,onAnimationStart:ne,onAnimationEnd:re,children:[n(De,{data:r,valueAccessor:Ee(e.accessor),content:n(be,{config:e,chartType:"bar",position:"insideRight"})}),r.map((f,g)=>n(Ie,{fill:B(e,f,o),stroke:B(e,f,o)},g))]},e.accessor)),!y&&n(Te,{verticalAlign:t.legendPosition,align:t.legendHorizontalAlign,onClick:$,wrapperStyle:ee}),a&&n(Be,{...a,stroke:(a==null?void 0:a.color)??(a==null?void 0:a.stroke),x:(a==null?void 0:a.value)??(a==null?void 0:a.x),label:a==null?void 0:a.label}),(i==null?void 0:i.active)!==!1&&n(ze,{cursor:ve,formatter:K,contentStyle:ke,labelFormatter:X,...i}),t.zoomingTool&&n(qe,{y:10,dataKey:Q,tickFormatter:h==null?void 0:h.formatter,stroke:D.sapObjectHeader_BorderColor,travellerWidth:10,height:20}),E]})})});b.defaultProps={noLegend:!1,noAnimation:!1};b.displayName="BarChart";try{b.displayName="BarChart",b.__docgenInfo={description:"A `BarChart` is a data visualization where each category is represented by a rectangle, with the width of the rectangle being proportional to the values being plotted.",displayName:"BarChart",props:{dimensions:{defaultValue:null,description:`An array of config objects. Each object will define one dimension of the chart.

**Required Properties**
- \`accessor\`: string containing the path to the dataset key the dimension should display. Supports object structures by using <code>'parent.child'</code>.
  Can also be a getter.

**Optional Properties**
- \`formatter\`: function will be called for each data label and allows you to format it according to your needs
- \`interval\`: number that controls how many ticks are rendered on the x axis`,name:"dimensions",required:!0,type:{name:"DimensionConfig[]"}},measures:{defaultValue:null,description:"An array of config objects. Each object is defining one bar in the chart.\n\n**Required properties**\n- `accessor`: string containing the path to the dataset key this bar should display. Supports object structures by using <code>'parent.child'</code>.\n  Can also be a getter.\n\n**Optional properties**\n\n- `label`: Label to display in legends or tooltips. Falls back to the <code>accessor</code> if not present.\n- `color`: any valid CSS Color or CSS Variable. Defaults to the `sapChart_OrderedColor_` colors\n- `formatter`: function will be called for each data label and allows you to format it according to your needs\n- `hideDataLabel`: flag whether the data labels should be hidden in the chart for this bar.\n- `DataLabel`: a custom component to be used for the data label\n- `width`: bar width, defaults to `auto`\n- `opacity`: bar opacity, defaults to `1`\n- `stackId`: bars with the same stackId will be stacked\n- `highlightColor`: function will be called to define a custom color of a specific element which matches the\n   defined condition. Overwrites code>color</code> of the element.",name:"measures",required:!0,type:{name:"MeasureConfig[]"}},loading:{defaultValue:null,description:`Flag whether the chart should display a loading indicator.

This can either be a placeholder shimmer (in case the chart has no data yet) or a small
loading bar in the top of the chart (in case the chart has already some data to display).`,name:"loading",required:!1,type:{name:"boolean"}},dataset:{defaultValue:null,description:"The `dataset` is an array of object which will be displayed in the chart.",name:"dataset",required:!1,type:{name:"Record<string, unknown>[]"}},children:{defaultValue:null,description:"With the help of the `children` prop you can add more svg elements to the chart, e.g. if you want to display\na linear gradient.",name:"children",required:!1,type:{name:"ReactNode | ReactNode[]"}},noLegend:{defaultValue:{value:"false"},description:"`noLegend` toggles the visibility of the legend below the chart. If this prop is `true`, no legend will be rendered.",name:"noLegend",required:!1,type:{name:"boolean"}},onClick:{defaultValue:null,description:"Fired when clicked anywhere in the chart.",name:"onClick",required:!1,type:{name:"(event: CustomEvent<{ payload: unknown; activePayloads: Record<string, unknown>[]; }>) => void"}},onDataPointClick:{defaultValue:null,description:"The `onDataPointClick` event fires whenever the user clicks on e.g. a  bar in `BarChart` or a point the `LineChart`.\n\nYou can use this event to trigger e.g. navigations or set filters based on the last clicked data point.",name:"onDataPointClick",required:!1,type:{name:"(event: CustomEvent<any>) => void"}},onLegendClick:{defaultValue:null,description:`The \`onLegendClick\` event fires when the user clicks on a label of the legend.

This can be useful to e.g. show/hide the current dataset in case you have multiple datasets in in your chart.
@param event`,name:"onLegendClick",required:!1,type:{name:"(event: CustomEvent<any>) => void"}},noAnimation:{defaultValue:{value:"false"},description:"`noAnimation` disables all chart animations when set to `true`.",name:"noAnimation",required:!1,type:{name:"boolean"}},chartConfig:{defaultValue:null,description:'Defines possible configurations of the chart.\n\n**Properties available on all charts:**\n\n- `margin`: Sets the margin of the chart container. Receives a object with four possible properties (`right`, `left`, `top`, `bottom`) that expect a number as value.\n- `legendPosition`: Position of the legend. Can be one of the following: `"top"`, `"left"`, `"right"`, `"bottom"`\n- `legendHorizontalAlign`: Alignment of the legend. Can be one of the following: `"left"`, `"center"`, `"right"`\n- `resizeDebounce`: Number that sets the amount of delay time the chart waits when resizing.\n\nPlease note that depending on the chart type, the `chartConfig` prop may accept more properties.',name:"chartConfig",required:!1,type:{name:"ICartesianChartConfig & { margin?: { right: number; left: number; top: number; bottom: number; }; legendPosition?: string; legendHorizontalAlign?: string; resizeDebounce?: number; }"}},tooltipConfig:{defaultValue:null,description:`Defines the configuration object for the internally used \`recharts\` Tooltip popover that is displayed when hovering over data points.
You can find all possible configuration properties [here](https://recharts.org/en-US/api/Tooltip).

__Note:__ It is possible to overwrite internally used tooltip props, so use with caution!`,name:"tooltipConfig",required:!1,type:{name:"Props<string | number | (string | number)[], string | number> & { allowEscapeViewBox?: { x?: boolean; y?: boolean; }; reverseDirection?: { x?: boolean; y?: boolean; }; content?: ContentType<string | number | (string | number)[], string | number>; ... 14 more ...; useTranslate3d?: boolean; }"}},syncId:{defaultValue:null,description:`A string which defines an id to synchronize two separate charts. Charts with the same syncId synchronize the position
of the tooltips, the startIndex and the endIndex of the zooming tool.`,name:"syncId",required:!1,type:{name:"string"}},ChartPlaceholder:{defaultValue:null,description:`Injects a custom loading placeholder which is used when no data are available. If the property isn't set the
standard loading placeholder of the specific chart is used.`,name:"ChartPlaceholder",required:!1,type:{name:"ComponentType<{}>"}},style:{defaultValue:null,description:`Element style which will be appended to the most outer element of a component.
Use this prop carefully, some css properties might break the component.`,name:"style",required:!1,type:{name:"CSSProperties"}},className:{defaultValue:null,description:`CSS Class Name which will be appended to the most outer element of a component.
Use this prop carefully, overwriting CSS rules might break the component.`,name:"className",required:!1,type:{name:"string"}}}}}catch{}export{b as B};
//# sourceMappingURL=BarChart-4cdb1166.js.map
