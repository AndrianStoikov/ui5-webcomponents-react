{"version":3,"file":"Toolbar.stories-559dabb6.js","sources":["../../packages/main/src/components/OverflowToolbarButton/index.tsx","../../packages/main/src/components/OverflowToolbarToggleButton/index.tsx","../../node_modules/@ui5/webcomponents-icons/dist/v4/download.js","../../node_modules/@ui5/webcomponents-icons/dist/v5/download.js","../../node_modules/@ui5/webcomponents-icons/dist/download.js","../../packages/main/src/components/Toolbar/Toolbar.stories.tsx"],"sourcesContent":["'use client';\n\nimport React, { forwardRef, ReactNode, useContext } from 'react';\nimport { OverflowPopoverContext } from '../../internal/OverflowPopoverContext';\nimport { Button, ButtonDomRef, ButtonPropTypes } from '../../webComponents';\n\nexport interface OverflowToolbarButtonPropTypes extends Omit<ButtonPropTypes, 'children' | 'icon'> {\n  /**\n   * Defines the text of the component which is only visible in the overflow area of a `Toolbar`.\n   *\n   * **Note:** Although this slot accepts HTML Elements, it is strongly recommended that you only use text in order to preserve the intended design.\n   */\n  children?: ReactNode | ReactNode[];\n  /**\n   * Defines the icon to be displayed as graphical element within the component. The SAP-icons font provides numerous options.\n   *\n   * Example: See all the available icons in the <ui5-link target=\"_blank\" href=\"https://openui5.hana.ondemand.com/test-resources/sap/m/demokit/iconExplorer/webapp/index.html\" class=\"api-table-content-cell-link\">Icon Explorer</ui5-link>.\n   */\n  icon: string;\n}\n\n/**\n * The `OverflowToolbarButton` represents a push button that shows its text only when in the overflow area of a `Toolbar`.\n */\nconst OverflowToolbarButton = forwardRef<ButtonDomRef, OverflowToolbarButtonPropTypes>((props, ref) => {\n  const { children, ...rest } = props;\n  const { inPopover } = useContext(OverflowPopoverContext);\n\n  return (\n    <Button {...rest} ref={ref}>\n      {inPopover ? children : ''}\n    </Button>\n  );\n});\n\nOverflowToolbarButton.displayName = 'OverflowToolbarButton';\n\nexport { OverflowToolbarButton };\n","'use client';\n\nimport React, { forwardRef, ReactNode, useContext } from 'react';\nimport { OverflowPopoverContext } from '../../internal/OverflowPopoverContext';\nimport { ToggleButton, ToggleButtonDomRef, ToggleButtonPropTypes } from '../../webComponents';\n\nexport interface OverflowToolbarToggleButtonPropTypes extends Omit<ToggleButtonPropTypes, 'children' | 'icon'> {\n  /**\n   * Defines the text of the component which is only visible in the overflow area of a `Toolbar`.\n   *\n   * **Note:** Although this slot accepts HTML Elements, it is strongly recommended that you only use text in order to preserve the intended design.\n   */\n  children?: ReactNode | ReactNode[];\n  /**\n   * Defines the icon to be displayed as graphical element within the component. The SAP-icons font provides numerous options.\n   *\n   * Example: See all the available icons in the <ui5-link target=\"_blank\" href=\"https://openui5.hana.ondemand.com/test-resources/sap/m/demokit/iconExplorer/webapp/index.html\" class=\"api-table-content-cell-link\">Icon Explorer</ui5-link>.\n   */\n  icon: string;\n}\n\n/**\n * The `OverflowToolbarToggleButton` represents a toggle button that shows its text only when in the overflow area of a `Toolbar`.\n */\nconst OverflowToolbarToggleButton = forwardRef<ToggleButtonDomRef, OverflowToolbarToggleButtonPropTypes>(\n  (props, ref) => {\n    const { children, ...rest } = props;\n    const { inPopover } = useContext(OverflowPopoverContext);\n\n    return (\n      <ToggleButton {...rest} ref={ref}>\n        {inPopover ? children : ''}\n      </ToggleButton>\n    );\n  }\n);\n\nOverflowToolbarToggleButton.displayName = 'OverflowToolbarToggleButton';\n\nexport { OverflowToolbarToggleButton };\n","import { registerIcon } from \"@ui5/webcomponents-base/dist/asset-registries/Icons.js\";\nimport { ICON_DOWNLOAD } from \"../generated/i18n/i18n-defaults.js\";\n\nconst name = \"download\";\nconst pathData = \"M480 448q13 0 22.5 9.5T512 480q0 14-9.5 23t-22.5 9H32q-14 0-23-9t-9-23q0-13 9-22.5t23-9.5h448zm-200-74q-10 10-22.5 9.5T235 374L133 273q-12-12 0-23 11-11 22 0l85 85V16q0-16 16-16t16 16v321l87-87q11-11 23 0 12 12 0 23z\";\nconst ltr = false;\nconst accData = ICON_DOWNLOAD;\nconst collection = \"SAP-icons-v4\";\nconst packageName = \"@ui5/webcomponents-icons\";\n\nregisterIcon(name, { pathData, ltr, accData, collection, packageName });\n\nexport default \"SAP-icons-v4/download\";\nexport { pathData, ltr, accData };","import { registerIcon } from \"@ui5/webcomponents-base/dist/asset-registries/Icons.js\";\nimport { ICON_DOWNLOAD } from \"../generated/i18n/i18n-defaults.js\";\n\nconst name = \"download\";\nconst pathData = \"M472 459q12 0 19.5 8t7.5 19q0 10-7.5 18.5T472 513H41q-13 0-20-8.5T14 486q0-11 7-19t20-8h431zM132 262q-8-8-8-18.5t8-18.5 19-8 19 8l62 62V28q0-12 7.5-19.5T259 1t19.5 7.5T286 28v259l62-62q8-8 19-8t19 8 8 18.5-8 18.5L278 370q-2 1-4 3-2 1-3.5 2t-3.5 3q-9 5-19 0-7-5-11-8z\";\nconst ltr = false;\nconst accData = ICON_DOWNLOAD;\nconst collection = \"SAP-icons-v5\";\nconst packageName = \"@ui5/webcomponents-icons\";\n\nregisterIcon(name, { pathData, ltr, accData, collection, packageName });\n\nexport default \"SAP-icons-v5/download\";\nexport { pathData, ltr, accData };","import { isThemeFamily } from \"@ui5/webcomponents-base/dist/config/Theme.js\";\nimport { pathData as pathDatav4, ltr, accData } from \"./v4/download.js\";\nimport { pathData as pathDatav5 } from \"./v5/download.js\";\n\nconst pathData = isThemeFamily(\"sap_horizon\") ? pathDatav5 : pathDatav4;\n\nexport default \"download\";\nexport { pathData, ltr, accData };","import type { Meta, StoryObj } from '@storybook/react';\nimport downloadIcon from '@ui5/webcomponents-icons/dist/download.js';\nimport editIcon from '@ui5/webcomponents-icons/dist/edit.js';\nimport favoriteIcon from '@ui5/webcomponents-icons/dist/favorite.js';\nimport settingsIcon from '@ui5/webcomponents-icons/dist/settings.js';\nimport { useState } from 'react';\nimport { ButtonDesign } from '../../enums/ButtonDesign.js';\nimport { ToolbarDesign } from '../../enums/ToolbarDesign.js';\nimport { ToolbarStyle } from '../../enums/ToolbarStyle.js';\nimport { Button } from '../../webComponents/Button/index.js';\nimport { DatePicker } from '../../webComponents/DatePicker/index.js';\nimport { Icon } from '../../webComponents/Icon/index.js';\nimport { Input } from '../../webComponents/Input/index.js';\nimport { Select } from '../../webComponents/Select/index.js';\nimport { Slider } from '../../webComponents/Slider/index.js';\nimport { Switch } from '../../webComponents/Switch/index.js';\nimport { ToggleButton } from '../../webComponents/ToggleButton/index.js';\nimport { OverflowToolbarButton } from '../OverflowToolbarButton';\nimport { OverflowToolbarToggleButton } from '../OverflowToolbarToggleButton';\nimport { Text } from '../Text/index.js';\nimport { ToolbarSeparator } from '../ToolbarSeparator/index.js';\nimport { ToolbarSpacer } from '../ToolbarSpacer/index.js';\nimport { Toolbar } from './index.js';\nconst meta = ({\n  title: 'Layouts & Floorplans / Toolbar',\n  component: Toolbar,\n  argTypes: {\n    children: {\n      control: {\n        disable: true\n      }\n    },\n    as: {\n      control: {\n        disable: true\n      }\n    },\n    overflowButton: {\n      control: {\n        disable: true\n      }\n    }\n  },\n  args: {\n    design: ToolbarDesign.Auto,\n    toolbarStyle: ToolbarStyle.Standard\n  }\n} satisfies Meta<typeof Toolbar>);\nexport default meta;\ntype Story = StoryObj<typeof meta>;\nexport const Default: Story = {\n  render(args) {\n    return <Toolbar {...args}>\n        <Text>Toolbar</Text>\n        <Button>Button One</Button>\n        <Button>Button Two</Button>\n        <Input />\n        <DatePicker />\n        <Switch />\n      </Toolbar>;\n  }\n};\nexport const RightAlignedItems: Story = {\n  name: 'right aligned items',\n  render(args) {\n    return <Toolbar {...args}>\n        <ToolbarSpacer />\n        <Button>Button</Button>\n        <Icon name={settingsIcon} />\n        <Icon name={downloadIcon} />\n      </Toolbar>;\n  }\n};\nexport const EvenlyAlignedItems: Story = {\n  name: 'evenly aligned items',\n  render(args) {\n    return <Toolbar {...args}>\n        <Text>Left</Text>\n        <ToolbarSpacer />\n        <Button>Center</Button>\n        <ToolbarSpacer />\n        <Text>Right</Text>\n        <Icon name={settingsIcon} />\n        <Icon name={downloadIcon} />\n      </Toolbar>;\n  }\n};\nexport const WithSeparator: Story = {\n  name: 'with separator',\n  render(args) {\n    return <Toolbar {...args}>\n        <Button>Item1</Button>\n        <Button>Item2</Button>\n        <Button>Item3</Button>\n        <ToolbarSeparator />\n        <Button>Item4</Button>\n        <Button>Item5</Button>\n        <ToolbarSeparator />\n        <Button>Item6</Button>\n        <ToolbarSeparator />\n        <Button>Item7</Button>\n      </Toolbar>;\n  }\n};\nexport const WithOverflowButton: Story = {\n  name: 'with overflow button',\n  render(args) {\n    const [value, setValue] = useState(100);\n    const handleInput = e => {\n      setValue(e.target.value);\n    };\n    return <>\n        <Slider onInput={handleInput} value={value} />\n        <Toolbar {...args} style={{\n        width: `calc(100% * ${value / 100})`\n      }}>\n          <Text>Toolbar</Text>\n          <Button>Button One</Button>\n          <Button icon=\"accept\" />\n          <Button>Button Two</Button>\n          <Select style={{\n          width: 'auto'\n        }} />\n          <Switch />\n          <Button>Button Three</Button>\n          <Button>Button Four</Button>\n          <OverflowToolbarButton icon={editIcon}>Edit</OverflowToolbarButton>\n          <OverflowToolbarToggleButton icon={favoriteIcon}>Favorite</OverflowToolbarToggleButton>\n        </Toolbar>\n      </>;\n  }\n};\nexport const OverflowBtns: Story = {\n  name: 'OverflowToolbarButton & OverflowToolbarToggleButton',\n  render(args) {\n    return <Toolbar {...args} style={{\n      width: '500px',\n      ...args.style\n    }}>\n        <Button icon={editIcon} tooltip=\"Text always visible\">\n          Default Button\n        </Button>\n        <OverflowToolbarButton icon={editIcon} tooltip=\"Text only visible in popover\">\n          OverflowToolbarButton (only visible in popover)\n        </OverflowToolbarButton>\n        <ToggleButton icon={favoriteIcon} tooltip=\"Text always visible\">\n          Default ToggleButton\n        </ToggleButton>\n        <OverflowToolbarToggleButton icon={favoriteIcon} tooltip=\"Text only visible in popover\">\n          OverflowToolbarToggleButton (only visible in popover)\n        </OverflowToolbarToggleButton>\n        <Button icon={editIcon} tooltip=\"Text always visible\">\n          Default Button\n        </Button>\n        <OverflowToolbarButton icon={editIcon} tooltip=\"Text only visible in popover\">\n          OverflowToolbarButton (only visible in popover)\n        </OverflowToolbarButton>\n        <ToggleButton icon={favoriteIcon} tooltip=\"Text always visible\">\n          Default ToggleButton\n        </ToggleButton>\n        <OverflowToolbarToggleButton icon={favoriteIcon} tooltip=\"Text only visible in popover\">\n          OverflowToolbarToggleButton (only visible in popover)\n        </OverflowToolbarToggleButton>\n      </Toolbar>;\n  }\n};\nexport const CustomOverflowButton: Story = {\n  name: 'with custom overflow button',\n  render(args) {\n    return <>\n        <Toolbar {...args} style={{\n        width: '300px',\n        ...args.style\n      }} overflowButton={<ToggleButton icon=\"menu2\" design={ButtonDesign.Transparent} onClick={() => {\n        alert('Custom action');\n      }} />}>\n          <Input />\n          <Text wrapping={false}>Overflow Content</Text>\n        </Toolbar>\n        <Toolbar {...args} style={{\n        width: '300px',\n        ...args.style\n      }} overflowButton={<ToggleButton icon=\"menu2\" design={ButtonDesign.Transparent} onClick={e => {\n        e.preventDefault();\n        alert('Custom action');\n      }} />}>\n          <Text wrapping={false}>Opening the popover is prevented</Text>\n          <Text wrapping={false}>Overflow Content</Text>\n        </Toolbar>\n      </>;\n  }\n};\nDefault.parameters = {\n  ...Default.parameters,\n  docs: {\n    ...Default.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  render(args) {\\n    return <Toolbar {...args}>\\n        <Text>Toolbar</Text>\\n        <Button>Button One</Button>\\n        <Button>Button Two</Button>\\n        <Input />\\n        <DatePicker />\\n        <Switch />\\n      </Toolbar>;\\n  }\\n}\",\n      ...Default.parameters?.docs?.source\n    }\n  }\n};\nRightAlignedItems.parameters = {\n  ...RightAlignedItems.parameters,\n  docs: {\n    ...RightAlignedItems.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  name: 'right aligned items',\\n  render(args) {\\n    return <Toolbar {...args}>\\n        <ToolbarSpacer />\\n        <Button>Button</Button>\\n        <Icon name={settingsIcon} />\\n        <Icon name={downloadIcon} />\\n      </Toolbar>;\\n  }\\n}\",\n      ...RightAlignedItems.parameters?.docs?.source\n    }\n  }\n};\nEvenlyAlignedItems.parameters = {\n  ...EvenlyAlignedItems.parameters,\n  docs: {\n    ...EvenlyAlignedItems.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  name: 'evenly aligned items',\\n  render(args) {\\n    return <Toolbar {...args}>\\n        <Text>Left</Text>\\n        <ToolbarSpacer />\\n        <Button>Center</Button>\\n        <ToolbarSpacer />\\n        <Text>Right</Text>\\n        <Icon name={settingsIcon} />\\n        <Icon name={downloadIcon} />\\n      </Toolbar>;\\n  }\\n}\",\n      ...EvenlyAlignedItems.parameters?.docs?.source\n    }\n  }\n};\nWithSeparator.parameters = {\n  ...WithSeparator.parameters,\n  docs: {\n    ...WithSeparator.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  name: 'with separator',\\n  render(args) {\\n    return <Toolbar {...args}>\\n        <Button>Item1</Button>\\n        <Button>Item2</Button>\\n        <Button>Item3</Button>\\n        <ToolbarSeparator />\\n        <Button>Item4</Button>\\n        <Button>Item5</Button>\\n        <ToolbarSeparator />\\n        <Button>Item6</Button>\\n        <ToolbarSeparator />\\n        <Button>Item7</Button>\\n      </Toolbar>;\\n  }\\n}\",\n      ...WithSeparator.parameters?.docs?.source\n    }\n  }\n};\nWithOverflowButton.parameters = {\n  ...WithOverflowButton.parameters,\n  docs: {\n    ...WithOverflowButton.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  name: 'with overflow button',\\n  render(args) {\\n    const [value, setValue] = useState(100);\\n    const handleInput = e => {\\n      setValue(e.target.value);\\n    };\\n    return <>\\n        <Slider onInput={handleInput} value={value} />\\n        <Toolbar {...args} style={{\\n        width: `calc(100% * ${value / 100})`\\n      }}>\\n          <Text>Toolbar</Text>\\n          <Button>Button One</Button>\\n          <Button icon=\\\"accept\\\" />\\n          <Button>Button Two</Button>\\n          <Select style={{\\n          width: 'auto'\\n        }} />\\n          <Switch />\\n          <Button>Button Three</Button>\\n          <Button>Button Four</Button>\\n          <OverflowToolbarButton icon={editIcon}>Edit</OverflowToolbarButton>\\n          <OverflowToolbarToggleButton icon={favoriteIcon}>Favorite</OverflowToolbarToggleButton>\\n        </Toolbar>\\n      </>;\\n  }\\n}\",\n      ...WithOverflowButton.parameters?.docs?.source\n    }\n  }\n};\nOverflowBtns.parameters = {\n  ...OverflowBtns.parameters,\n  docs: {\n    ...OverflowBtns.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  name: 'OverflowToolbarButton & OverflowToolbarToggleButton',\\n  render(args) {\\n    return <Toolbar {...args} style={{\\n      width: '500px',\\n      ...args.style\\n    }}>\\n        <Button icon={editIcon} tooltip=\\\"Text always visible\\\">\\n          Default Button\\n        </Button>\\n        <OverflowToolbarButton icon={editIcon} tooltip=\\\"Text only visible in popover\\\">\\n          OverflowToolbarButton (only visible in popover)\\n        </OverflowToolbarButton>\\n        <ToggleButton icon={favoriteIcon} tooltip=\\\"Text always visible\\\">\\n          Default ToggleButton\\n        </ToggleButton>\\n        <OverflowToolbarToggleButton icon={favoriteIcon} tooltip=\\\"Text only visible in popover\\\">\\n          OverflowToolbarToggleButton (only visible in popover)\\n        </OverflowToolbarToggleButton>\\n        <Button icon={editIcon} tooltip=\\\"Text always visible\\\">\\n          Default Button\\n        </Button>\\n        <OverflowToolbarButton icon={editIcon} tooltip=\\\"Text only visible in popover\\\">\\n          OverflowToolbarButton (only visible in popover)\\n        </OverflowToolbarButton>\\n        <ToggleButton icon={favoriteIcon} tooltip=\\\"Text always visible\\\">\\n          Default ToggleButton\\n        </ToggleButton>\\n        <OverflowToolbarToggleButton icon={favoriteIcon} tooltip=\\\"Text only visible in popover\\\">\\n          OverflowToolbarToggleButton (only visible in popover)\\n        </OverflowToolbarToggleButton>\\n      </Toolbar>;\\n  }\\n}\",\n      ...OverflowBtns.parameters?.docs?.source\n    }\n  }\n};\nCustomOverflowButton.parameters = {\n  ...CustomOverflowButton.parameters,\n  docs: {\n    ...CustomOverflowButton.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  name: 'with custom overflow button',\\n  render(args) {\\n    return <>\\n        <Toolbar {...args} style={{\\n        width: '300px',\\n        ...args.style\\n      }} overflowButton={<ToggleButton icon=\\\"menu2\\\" design={ButtonDesign.Transparent} onClick={() => {\\n        alert('Custom action');\\n      }} />}>\\n          <Input />\\n          <Text wrapping={false}>Overflow Content</Text>\\n        </Toolbar>\\n        <Toolbar {...args} style={{\\n        width: '300px',\\n        ...args.style\\n      }} overflowButton={<ToggleButton icon=\\\"menu2\\\" design={ButtonDesign.Transparent} onClick={e => {\\n        e.preventDefault();\\n        alert('Custom action');\\n      }} />}>\\n          <Text wrapping={false}>Opening the popover is prevented</Text>\\n          <Text wrapping={false}>Overflow Content</Text>\\n        </Toolbar>\\n      </>;\\n  }\\n}\",\n      ...CustomOverflowButton.parameters?.docs?.source\n    }\n  }\n};"],"names":["OverflowToolbarButton","forwardRef","props","ref","children","rest","inPopover","useContext","OverflowPopoverContext","jsx","Button","OverflowToolbarToggleButton","ToggleButton","name","pathData","ltr","accData","ICON_DOWNLOAD","collection","packageName","registerIcon","isThemeFamily","downloadIcon","meta","Toolbar","ToolbarDesign","ToolbarStyle","Default","args","jsxs","Text","Input","DatePicker","Switch","RightAlignedItems","ToolbarSpacer","Icon","settingsIcon","EvenlyAlignedItems","WithSeparator","ToolbarSeparator","WithOverflowButton","value","setValue","useState","Fragment","Slider","e","Select","editIcon","favoriteIcon","OverflowBtns","CustomOverflowButton","ButtonDesign","_a","_c","_b"],"mappings":"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"}