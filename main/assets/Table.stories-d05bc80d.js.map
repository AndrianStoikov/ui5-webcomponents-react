{"version":3,"file":"Table.stories-d05bc80d.js","sources":["../../packages/main/src/webComponents/Table/Table.stories.tsx"],"sourcesContent":["import type { Meta, StoryObj } from '@storybook/react';\nimport { useState } from 'react';\nimport { TableGrowingMode } from '../../enums/index.js';\nimport { Label } from '../Label/index.js';\nimport { TableCell } from '../TableCell/index.js';\nimport { TableColumn } from '../TableColumn/index.js';\nimport { TableRow } from '../TableRow/index.js';\nimport { Table } from './index.js';\nconst meta = ({\n  title: 'Data Display / Table',\n  component: Table,\n  argTypes: {\n    columns: {\n      control: {\n        disable: true\n      }\n    },\n    children: {\n      control: {\n        disable: true\n      }\n    }\n  },\n  args: {}\n} satisfies Meta<typeof Table>);\nexport default meta;\ntype Story = StoryObj<typeof meta>;\nexport const Default: Story = {\n  render: args => {\n    return <Table {...args} columns={<>\n            <TableColumn style={{\n        width: '12rem'\n      }}>\n              <Label>Product</Label>\n            </TableColumn>\n            <TableColumn minWidth={800} popinText=\"Supplier\">\n              <Label>Supplier</Label>\n            </TableColumn>\n            <TableColumn minWidth={600} popinText=\"Dimensions\" demandPopin>\n              <Label>Dimensions</Label>\n            </TableColumn>\n            <TableColumn minWidth={600} popinText=\"Weight\" demandPopin>\n              <Label>Weight</Label>\n            </TableColumn>\n            <TableColumn>\n              <Label>Price</Label>\n            </TableColumn>\n          </>}>\n        <TableRow>\n          <TableCell>\n            <Label>Notebook Basic</Label>\n          </TableCell>\n          <TableCell>\n            <Label>Very Best Screens</Label>\n          </TableCell>\n          <TableCell>\n            <Label>30 x 18 x 3cm</Label>\n          </TableCell>\n          <TableCell>\n            <Label>4.2KG</Label>\n          </TableCell>\n          <TableCell>\n            <Label>956EUR</Label>\n          </TableCell>\n        </TableRow>\n        <TableRow>\n          <TableCell>\n            <Label>Notebook Basic 17HT-1001</Label>\n          </TableCell>\n          <TableCell>\n            <Label>Very Best Screens</Label>\n          </TableCell>\n          <TableCell>\n            <Label>29 x 17 x 3.1cm</Label>\n          </TableCell>\n          <TableCell>\n            <Label>4.5KG</Label>\n          </TableCell>\n          <TableCell>\n            <Label>1249EUR</Label>\n          </TableCell>\n        </TableRow>\n      </Table>;\n  }\n};\nexport const GrowingTable: Story = {\n  render: () => {\n    const createRows = indexOffset => {\n      return new Array(25).fill('').map((_, index) => <TableRow key={`${index + indexOffset}-row`}>\n          <TableCell>\n            <Label>{index + indexOffset}</Label>\n          </TableCell>\n          <TableCell>\n            <Label>Placeholder</Label>\n          </TableCell>\n        </TableRow>);\n    };\n    const [rows, setRows] = useState(createRows(1));\n    const onLoadMore = () => {\n      setRows(prev => [...prev, ...createRows(prev.length + 1)]);\n    };\n    return <div style={{\n      height: '250px',\n      overflow: 'auto'\n    }}>\n        <Table onLoadMore={onLoadMore} growing={TableGrowingMode.Scroll} columns={<>\n              <TableColumn>\n                <Label>Column 1</Label>\n              </TableColumn>\n              <TableColumn>\n                <Label>Column 2</Label>\n              </TableColumn>\n            </>}>\n          {rows}\n        </Table>\n      </div>;\n  }\n};\nDefault.parameters = {\n  ...Default.parameters,\n  docs: {\n    ...Default.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  render: args => {\\n    return <Table {...args} columns={<>\\n            <TableColumn style={{\\n        width: '12rem'\\n      }}>\\n              <Label>Product</Label>\\n            </TableColumn>\\n            <TableColumn minWidth={800} popinText=\\\"Supplier\\\">\\n              <Label>Supplier</Label>\\n            </TableColumn>\\n            <TableColumn minWidth={600} popinText=\\\"Dimensions\\\" demandPopin>\\n              <Label>Dimensions</Label>\\n            </TableColumn>\\n            <TableColumn minWidth={600} popinText=\\\"Weight\\\" demandPopin>\\n              <Label>Weight</Label>\\n            </TableColumn>\\n            <TableColumn>\\n              <Label>Price</Label>\\n            </TableColumn>\\n          </>}>\\n        <TableRow>\\n          <TableCell>\\n            <Label>Notebook Basic</Label>\\n          </TableCell>\\n          <TableCell>\\n            <Label>Very Best Screens</Label>\\n          </TableCell>\\n          <TableCell>\\n            <Label>30 x 18 x 3cm</Label>\\n          </TableCell>\\n          <TableCell>\\n            <Label>4.2KG</Label>\\n          </TableCell>\\n          <TableCell>\\n            <Label>956EUR</Label>\\n          </TableCell>\\n        </TableRow>\\n        <TableRow>\\n          <TableCell>\\n            <Label>Notebook Basic 17HT-1001</Label>\\n          </TableCell>\\n          <TableCell>\\n            <Label>Very Best Screens</Label>\\n          </TableCell>\\n          <TableCell>\\n            <Label>29 x 17 x 3.1cm</Label>\\n          </TableCell>\\n          <TableCell>\\n            <Label>4.5KG</Label>\\n          </TableCell>\\n          <TableCell>\\n            <Label>1249EUR</Label>\\n          </TableCell>\\n        </TableRow>\\n      </Table>;\\n  }\\n}\",\n      ...Default.parameters?.docs?.source\n    }\n  }\n};\nGrowingTable.parameters = {\n  ...GrowingTable.parameters,\n  docs: {\n    ...GrowingTable.parameters?.docs,\n    source: {\n      originalSource: \"{\\n  render: () => {\\n    const createRows = indexOffset => {\\n      return new Array(25).fill('').map((_, index) => <TableRow key={`${index + indexOffset}-row`}>\\n          <TableCell>\\n            <Label>{index + indexOffset}</Label>\\n          </TableCell>\\n          <TableCell>\\n            <Label>Placeholder</Label>\\n          </TableCell>\\n        </TableRow>);\\n    };\\n    const [rows, setRows] = useState(createRows(1));\\n    const onLoadMore = () => {\\n      setRows(prev => [...prev, ...createRows(prev.length + 1)]);\\n    };\\n    return <div style={{\\n      height: '250px',\\n      overflow: 'auto'\\n    }}>\\n        <Table onLoadMore={onLoadMore} growing={TableGrowingMode.Scroll} columns={<>\\n              <TableColumn>\\n                <Label>Column 1</Label>\\n              </TableColumn>\\n              <TableColumn>\\n                <Label>Column 2</Label>\\n              </TableColumn>\\n            </>}>\\n          {rows}\\n        </Table>\\n      </div>;\\n  }\\n}\",\n      ...GrowingTable.parameters?.docs?.source\n    }\n  }\n};"],"names":["meta","Table","Default","args","jsxs","Fragment","jsx","TableColumn","Label","TableRow","TableCell","GrowingTable","createRows","indexOffset","_","index","rows","setRows","useState","prev","TableGrowingMode","_a","_c","_b"],"mappings":"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"}