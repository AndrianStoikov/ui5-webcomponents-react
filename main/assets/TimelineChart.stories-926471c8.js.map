{"version":3,"file":"TimelineChart.stories-926471c8.js","sources":["../../packages/base/src/utils/throttle.ts","../../packages/charts/src/components/TimelineChart/util/constants.ts","../../packages/charts/src/components/TimelineChart/util/context.ts","../../packages/charts/src/components/TimelineChart/util/styles.ts","../../packages/charts/src/components/TimelineChart/chartbody/TimelineChartGrid.tsx","../../packages/charts/src/components/TimelineChart/chartbody/TimelineChartLayer.tsx","../../packages/charts/src/components/TimelineChart/chartbody/TimelineChartRow.tsx","../../packages/charts/src/components/TimelineChart/types/TimelineChartTypes.ts","../../packages/charts/src/components/TimelineChart/chartbody/TimelineConnections.tsx","../../packages/charts/src/components/TimelineChart/chartbody/TimelineChartBody.tsx","../../packages/charts/src/components/TimelineChart/Placeholder.tsx","../../packages/charts/src/components/TimelineChart/TimelineChartHeaders.tsx","../../packages/charts/src/components/TimelineChart/util/error.ts","../../packages/charts/src/components/TimelineChart/TimelineChart.tsx","../../packages/charts/src/components/TimelineChart/TimelineChartAnnotation.tsx","../../packages/charts/src/components/TimelineChart/examples/Dataset.ts","../../packages/charts/src/components/TimelineChart/examples/Annotations.tsx","../../packages/charts/src/components/TimelineChart/TimelineChart.stories.mdx"],"sourcesContent":["// Copied from https://github.com/jashkenas/underscore/blob/master/modules/throttle.js (24th January 2023)\n\nconst now = Date.now || (() => new Date().getTime());\n\ninterface Cancelable {\n  cancel(): void;\n}\n\ninterface Options {\n  leading?: boolean;\n  trailing?: boolean;\n}\n\n/**\n * Returns a function, that, when invoked, will only be triggered at most once\n * during a given window of time. Normally, the throttled function will run\n * as much as it can, without ever going more than once per `wait` duration;\n * but if you'd like to disable the execution on the leading edge, pass\n * `{leading: false}`. To disable execution on the trailing edge, ditto.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nconst throttle = <T extends Function>(\n  func: T,\n  wait: number,\n  options: Options = { leading: true, trailing: true }\n): T & Cancelable => {\n  let timeout;\n  let context;\n  let args;\n  let result;\n  let previous = 0;\n  if (!options) options = {};\n\n  const later = () => {\n    previous = options.leading === false ? 0 : now();\n    timeout = null;\n    result = func.apply(context, args);\n    if (!timeout) context = args = null;\n  };\n\n  const throttled = function (...params: unknown[]) {\n    const _now = now();\n    if (!previous && options.leading === false) previous = _now;\n    const remaining = wait - (_now - previous);\n    // @ts-expect-error: copied - no need to infer types here\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    context = this;\n    args = params;\n    if (remaining <= 0 || remaining > wait) {\n      if (timeout) {\n        clearTimeout(timeout);\n        timeout = null;\n      }\n      previous = _now;\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    } else if (!timeout && options.trailing !== false) {\n      timeout = setTimeout(later, remaining);\n    }\n    return result;\n  };\n\n  throttled.cancel = () => {\n    clearTimeout(timeout);\n    previous = 0;\n    timeout = context = args = null;\n  };\n\n  // @ts-expect-error: copied - no need to infer types here\n  return throttled;\n};\n\nexport { throttle };\n","// TimelineChart\nexport const DEFAULT_WIDTH = 'auto';\nexport const ROW_TITLE_WIDTH = 150;\nexport const COLUMN_HEADER_HEIGHT = 50;\nexport const DEFAULT_ROW_HEIGHT = 25;\nexport const DEFAULT_CHART_VERTICAL_COLS = 5;\nexport const INVALID_DISCRETE_LABELS_MESSAGE =\n  'The \"discreteLabels\" prop length must be equal to the \"totalDuration\" prop value if supplied. \\\n  Please adjust the discreteLabel array or change the totalDuration.';\nexport const ILLEGAL_CONNECTION_MESSAGE =\n  'Tasks or Milestones with connections must have a unique ID. \\\n  Please a unique \"id\" property to any Task or Milestone item with a connection';\nexport const MOUSE_CURSOR_AUTO = 'auto';\nexport const MOUSE_CURSOR_GRAB = 'grab';\nexport const MOUSE_CURSOR_GRABBING = 'grabbing';\nexport const TOLERANCE = 0.01;\n\n// TimelineChartBody\nexport const SCALE_FACTOR = 1.1;\nexport const THROTTLE_INTERVAL = 300;\nexport const NORMAL_OPACITY = 1.0;\nexport const HOVER_OPACITY = 0.7;\nexport const ARROWHEAD_WIDTH = 8; // base of the arrow head triangle. Where the line joins the head\nexport const ARROWHEAD_HEIGHT = 5; // Distance from the pointy tip to where the arrow line joins the head\nexport const ARROW_CLEARANCE = ARROWHEAD_HEIGHT + 3;\nexport const MAX_BODY_WIDTH = 65500;\n\n// TimelineChartHeaders\nexport const TICK_LENGTH = 5;\nexport const SPACING = 2;\n","import { createContext } from 'react';\n\nexport const TimelineChartBodyCtx = createContext({ chartBodyWidth: 0 });\n","import { ThemingParameters } from '@ui5/webcomponents-react-base';\nimport { createUseStyles } from 'react-jss';\n\nconst solidOutline = `0.5px solid ${ThemingParameters.sapList_BorderColor}`;\n\nconst styles = {\n  onlyOutline: { outline: solidOutline },\n\n  main: {\n    outline: solidOutline,\n    backgroundColor: ThemingParameters.sapBaseColor,\n    display: 'grid',\n    gap: 0\n  },\n\n  bodyContainer: { overflow: 'hidden' },\n\n  columnTitle: {\n    position: 'absolute',\n    borderBlockEnd: solidOutline,\n    marginBlockEnd: '-0.5px',\n    textAlign: 'center',\n    fontSize: '13px',\n    color: ThemingParameters.sapTitleColor\n  },\n\n  annotation: { position: 'absolute' },\n\n  rowLabels: {\n    outline: solidOutline,\n    color: ThemingParameters.sapTitleColor\n  },\n\n  rowLabelsItem: {\n    width: '100%',\n    outline: solidOutline,\n    fontSize: '10px',\n    textAlign: 'center',\n    whiteSpace: 'nowrap',\n    overflow: 'hidden',\n    textOverflow: 'ellipsis'\n  },\n\n  columnLabel: {\n    outline: solidOutline,\n    color: ThemingParameters.sapTitleColor\n  },\n\n  columnTitlePlaceHolder: {\n    textAlign: 'center',\n    borderBlockEnd: solidOutline,\n    fontSize: '13px'\n  },\n\n  columnLabelItems: {\n    fontSize: '10px',\n    display: 'grid',\n    textAlign: 'center'\n  },\n\n  rowTitleTop: { height: '50%' },\n\n  rowTitleBottom: {\n    height: '50%',\n    textAlign: 'center',\n    fontSize: '13px'\n  },\n\n  chartBody: {\n    position: 'relative',\n    outline: `1px solid ${ThemingParameters.sapList_BorderColor}`\n  },\n\n  tooltipContainer: {\n    width: '100%',\n    height: '100%',\n    fontSize: '10px',\n    position: 'absolute',\n    pointerEvents: 'none'\n  },\n\n  tooltip: {\n    minWidth: 80,\n    display: 'inline-grid',\n    gap: 2,\n    padding: 10,\n    outline: `2px solid ${ThemingParameters.sapList_BorderColor}`,\n    borderRadius: 8,\n    color: ThemingParameters.sapTextColor,\n    backgroundColor: ThemingParameters.sapBackgroundColor,\n    position: 'absolute'\n  },\n\n  tooltipLabel: { textAlign: 'center' },\n\n  tooltipColorBar: {\n    width: '100%',\n    height: '4px'\n  },\n\n  layer: {\n    width: '100%',\n    height: '100%'\n  }\n};\n\nexport const useStyles = createUseStyles(styles, { name: 'TimelineChart' });\n","import { ThemingParameters } from '@ui5/webcomponents-react-base';\nimport React, { ReactElement } from 'react';\nimport { DEFAULT_CHART_VERTICAL_COLS, TOLERANCE } from '../util/constants';\n\ninterface TimelineChartGridProps {\n  /**\n   * Whether to render the vertical grid lines for a TimelineChart\n   * with discrete segments.\n   */\n  isDiscrete: boolean;\n  numOfRows: number;\n  rowHeight: number;\n  totalDuration: number;\n  width: number;\n  unscaledWidth: number;\n}\n\n/**\n * This component represents the grid lines on the chart. The `isDiscrete` prop is\n * used to decided whether to render the vertical grid lines.\n */\nconst TimelineChartGrid = ({\n  isDiscrete,\n  numOfRows,\n  rowHeight,\n  totalDuration,\n  width,\n  unscaledWidth\n}: TimelineChartGridProps) => {\n  const verticalSegmentWidth = unscaledWidth / DEFAULT_CHART_VERTICAL_COLS;\n  return (\n    <g style={{ stroke: ThemingParameters.sapList_BorderColor }}>\n      {generateHGridLines(numOfRows, rowHeight)}\n      {isDiscrete\n        ? generateDiscreteVGridLines(totalDuration)\n        : generateNonDiscreteVGridLines(width, verticalSegmentWidth)}\n    </g>\n  );\n};\n\n/**\n * This function generates the grid lines using the number of segments provided.\n * Each segment is calculated as a fraction of the overall height.\n * @param numOfSegments The number of rows the grid should have.\n * @param rowHeight The height of each row.\n * @returns An array of horizontal grid lines in SVG.\n */\nconst generateHGridLines = (numOfSegments: number, rowHeight: number): ReactElement[] => {\n  const gridLineArray: ReactElement[] = [];\n  for (let i = 1; i < numOfSegments; i++) {\n    const segmentOffset = rowHeight * i;\n    gridLineArray.push(\n      <line\n        x1=\"0\"\n        y1={`${segmentOffset}`}\n        x2=\"100%\"\n        y2={`${segmentOffset}`}\n        key={`${segmentOffset}gridh`}\n        strokeWidth=\"1px\"\n      />\n    );\n  }\n  return gridLineArray;\n};\n\n/**\n * This function generates the grid lines using the number of segments provided.\n * Each segment is calculated as a fraction of the overall width.\n * @param numOfSegments The number of columns the grid should have.\n * @returns An array of vertical grid lines in SVG.\n */\nconst generateDiscreteVGridLines = (numOfSegments: number): ReactElement[] => {\n  const segmentSizePercent = 100 / numOfSegments;\n  const gridLineArray: ReactElement[] = [];\n  for (let i = 1; i < numOfSegments; i++) {\n    const segmentOffset = segmentSizePercent * i;\n    gridLineArray.push(\n      <line\n        data-component-name=\"TimelineChartGridv\"\n        x1={`${segmentOffset}%`}\n        y1=\"0\"\n        x2={`${segmentOffset}%`}\n        y2=\"100%\"\n        key={`${segmentOffset}gridv`}\n      />\n    );\n  }\n  return gridLineArray;\n};\n\n/**\n * This function generates the grid lines using the verticalSegmentWidth provided.\n * Each segment is calculated to be greater than or exactly equal to the verticalSegmentWidth.\n * @param width The width of the chart body.\n * @param verticalSegmentWidth The calculated width each vertical segment should be originally.\n * @returns An array of vertical grid lines in SVG.\n */\nconst generateNonDiscreteVGridLines = (width: number, verticalSegmentWidth: number): ReactElement[] => {\n  const gridLineArray: ReactElement[] = [];\n  let covered = verticalSegmentWidth;\n  let remaining = width;\n  if (verticalSegmentWidth <= 0) return null;\n  while (remaining >= 2 * verticalSegmentWidth - TOLERANCE) {\n    gridLineArray.push(\n      <line\n        data-component-name=\"TimelineChartGridv\"\n        x1={`${covered}`}\n        y1=\"0\"\n        x2={`${covered}`}\n        y2=\"100%\"\n        key={`${covered}gridv`}\n      />\n    );\n    covered += verticalSegmentWidth;\n    remaining -= verticalSegmentWidth;\n  }\n  return gridLineArray;\n};\n\nexport { TimelineChartGrid };\n","import React, { ReactNode } from 'react';\nimport { useStyles } from '../util/styles';\n\ninterface TimelineChartLayerProps {\n  ignoreClick?: boolean;\n  children?: ReactNode | ReactNode[];\n  isAnnotation?: boolean;\n  name?: string;\n}\n\n/**\n * The TimeLineChartLayer represents each layer of the chart rendering. This\n * is used to seperate the chart into different rendering concerns. One layer\n * can be used to render the grid lines and another can be used to render\n * annotations or tasks.\n */\nconst TimelineChartLayer = ({ ignoreClick = false, isAnnotation, children, name }: TimelineChartLayerProps) => {\n  const classes = useStyles();\n  const position = 'absolute';\n  const pointerEvents = ignoreClick ? 'none' : 'auto';\n\n  if (isAnnotation) {\n    return (\n      <div\n        data-component-name={name}\n        className={classes.layer}\n        style={{ position: position, pointerEvents: pointerEvents }}\n      >\n        {children}\n      </div>\n    );\n  }\n  return (\n    <svg\n      data-component-name={name}\n      width=\"100%\"\n      height=\"100%\"\n      style={{ position: position, pointerEvents: pointerEvents }}\n    >\n      {children}\n    </svg>\n  );\n};\n\nexport { TimelineChartLayer };\n","import { throttle } from '@ui5/webcomponents-react-base';\nimport React, { CSSProperties, useEffect, useRef, useState } from 'react';\nimport { ITimelineChartRow } from '../types/TimelineChartTypes';\nimport { HOVER_OPACITY, NORMAL_OPACITY, THROTTLE_INTERVAL } from '../util/constants';\n\ninterface TimelineChartRowProps {\n  rowData: ITimelineChartRow;\n  rowHeight: number;\n  rowIndex: number;\n  totalDuration: number;\n  timelineStart: number;\n  showTooltip: (...x: unknown[]) => void;\n  hideTooltip: () => void;\n}\n\n/**\n * This represents each row of the TimelineChart. It is used to display\n * the task items and milestones.\n */\nconst TimelineChartRow = ({\n  rowData,\n  rowHeight,\n  rowIndex,\n  totalDuration,\n  timelineStart,\n  showTooltip,\n  hideTooltip\n}: TimelineChartRowProps) => {\n  rowData.color = rowData.color ?? `var(--sapChart_OrderedColor_${(rowIndex % 11) + 1})`;\n\n  return (\n    <svg x=\"0\" y={`${rowIndex * rowHeight}`} width=\"100%\" height={`${rowHeight}`} style={{ pointerEvents: 'none' }}>\n      {rowData.tasks?.map((task, index) => {\n        return (\n          <TimelineTask\n            key={index}\n            id={task.id}\n            label={task.label ?? rowData.label}\n            startTime={task.start}\n            duration={task.duration}\n            totalDuration={totalDuration}\n            color={task.color ?? rowData.color}\n            timelineStart={timelineStart}\n            showTooltip={showTooltip}\n            hideTooltip={hideTooltip}\n          />\n        );\n      })}\n      {rowData.milestones?.map((mStone, index) => {\n        return (\n          <TimelineMilestone\n            key={index}\n            id={mStone.id}\n            label={mStone.label}\n            time={mStone.start}\n            color={mStone.color}\n            totalDuration={totalDuration}\n            timelineStart={timelineStart}\n            showTooltip={showTooltip}\n            hideTooltip={hideTooltip}\n          />\n        );\n      })}\n    </svg>\n  );\n};\n\ninterface TimelineTaskProps {\n  /**\n   * The unique id of the task. This is used to get the position\n   * in the DOM and draw any connection arrows pointing to or away\n   * from it.\n   */\n  id?: string;\n\n  /**\n   * The task item label. If not set, the label of the row is used.\n   */\n  label?: string;\n\n  /**\n   * The starting time of the task on the timeline. Can\n   * also be seen as the x-offset of the task. It is a\n   * percentage of the total rendered duration of the\n   * timeline.\n   */\n  startTime: number;\n\n  /**\n   * Duration of the task.\n   */\n  duration: number;\n\n  /**\n   * The total duration of the timeline. This helps in knowing\n   * where to position the milestone.\n   */\n  totalDuration: number;\n\n  color: CSSProperties['color'];\n\n  timelineStart: number;\n\n  showTooltip: (\n    mouseX: number,\n    mouseY: number,\n    name: string,\n    startTime: number,\n    duration: number,\n    color: string,\n    isMilestone: boolean\n  ) => void;\n\n  hideTooltip: () => void;\n}\n\nconst TimelineTask = ({\n  id,\n  label,\n  startTime,\n  duration,\n  totalDuration,\n  color,\n  timelineStart,\n  showTooltip,\n  hideTooltip\n}: TimelineTaskProps) => {\n  const [opacity, setOpacity] = useState(NORMAL_OPACITY);\n  const onMouseLeave = (evt: React.MouseEvent<SVGRectElement, MouseEvent>) => {\n    evt.stopPropagation();\n    hideTooltip();\n    setOpacity(NORMAL_OPACITY);\n  };\n\n  const mouseMoveHandler = (evt: React.MouseEvent<SVGRectElement, MouseEvent>) => {\n    evt.stopPropagation();\n    setOpacity(HOVER_OPACITY);\n    showTooltip(evt.clientX, evt.clientY, label, startTime, duration, color, false);\n  };\n\n  const onMouseMove = throttle(mouseMoveHandler, THROTTLE_INTERVAL, { trailing: false });\n\n  // The 10% y value is to create a little gap between the top grid line and the\n  // rendered TimelineTask itself. The height is set to 80% to allow for an\n  // equal gap at the bottom with the bottom grid line.\n  return (\n    <rect\n      data-component-name=\"TimelineChartTask\"\n      id={id}\n      x={`${((startTime - timelineStart) / totalDuration) * 100}%`}\n      y=\"10%\"\n      width={`${(duration / totalDuration) * 100}%`}\n      height=\"80%\"\n      rx=\"4\"\n      ry=\"4\"\n      style={{ fill: color, pointerEvents: 'auto', cursor: 'pointer', opacity: opacity }}\n      onMouseLeave={onMouseLeave}\n      onMouseMove={onMouseMove}\n    />\n  );\n};\n\ninterface TimelineMilestoneProps {\n  /**\n   * The unique id of the milestone. This is used to get the position\n   * in the DOM and draw any connection arrows pointing to or away\n   * from it.\n   */\n  id?: string;\n\n  /**\n   * The milestone label. If not set, the label is just 'Milestone'.\n   */\n  label?: string;\n\n  /**\n   * The position of a milestone on the timeline. Can\n   * also be seen as the x-offset of the milestone. It is a\n   * percentage of the total rendered duration of the\n   * timeline.\n   */\n  time: number;\n\n  /**\n   * The total duration of the timeline. This helps in knowing\n   * where to position the milestone.\n   */\n  totalDuration: number;\n\n  color?: CSSProperties['color'];\n\n  timelineStart: number;\n\n  showTooltip: (\n    mouseX: number,\n    mouseY: number,\n    label: string,\n    startTime: number,\n    duration: number,\n    color: string,\n    isMilestone: boolean\n  ) => void;\n\n  hideTooltip: () => void;\n}\n\nconst TimelineMilestone = ({\n  id,\n  label = 'Milestone',\n  time,\n  totalDuration,\n  color = '#007D00',\n  timelineStart,\n  showTooltip,\n  hideTooltip\n}: TimelineMilestoneProps) => {\n  const milestoneRef = useRef<SVGRectElement>(null);\n\n  useEffect(() => {\n    const milestone = milestoneRef.current;\n\n    // Replace the zero-width Rect with a Rhombus.\n    // Draw a rhombus shape with the length of the diagonals equal\n    // to the height of the initial rect. A square is drawn first\n    // then that square is translated to the left and downwards so\n    // that the center aligns with the initial x position and the\n    // center of the row. Then it is rotated 45° about that its center.\n    const { height: rhombusDiagonal } = milestone.getBoundingClientRect();\n    const rhombusSideLength = Math.sqrt(Math.pow(rhombusDiagonal, 2) / 2);\n    milestone.setAttribute('width', rhombusSideLength.toString());\n    milestone.setAttribute('height', rhombusSideLength.toString());\n    milestone.setAttribute(\n      'transform',\n      `translate(\n        ${-rhombusSideLength / 2}, \n        ${(rhombusDiagonal - rhombusSideLength) / 2}) \n      rotate(45, ${rhombusSideLength / 2}, \n        ${rhombusSideLength / 2}\n      )`\n    );\n  }, []);\n\n  const [opacity, setOpacity] = useState(NORMAL_OPACITY);\n\n  const onMouseLeave = (evt: React.MouseEvent<SVGRectElement, MouseEvent>) => {\n    evt.stopPropagation();\n    hideTooltip();\n    setOpacity(NORMAL_OPACITY);\n  };\n\n  const mouseMoveHandler = (evt: React.MouseEvent<SVGRectElement, MouseEvent>) => {\n    evt.stopPropagation();\n    setOpacity(HOVER_OPACITY);\n    showTooltip(evt.clientX, evt.clientY, label, time, 0, color, true);\n  };\n\n  const onMouseMove = throttle(mouseMoveHandler, THROTTLE_INTERVAL, { trailing: false });\n\n  // The 10% y value is to create a little gap between the top grid line and the\n  // rendered Milestone itself. The height is set to 80% to allow for an\n  // equal gap at the bottom with the bottom grid line.\n  return (\n    <svg\n      data-component-name=\"TimelineChartMilestone\"\n      x={`${((time - timelineStart) / totalDuration) * 100}%`}\n      y=\"10%\"\n      height=\"80%\"\n      overflow=\"visible\"\n    >\n      <rect // Zero-width rect. 1px width is used as a place-holder. Height is used to draw a rhombus after component is mounted.\n        id={id}\n        ref={milestoneRef}\n        width=\"1\"\n        height=\"100%\"\n        rx=\"3\"\n        ry=\"3\"\n        style={{ fill: color, pointerEvents: 'auto', cursor: 'pointer', opacity: opacity }}\n        onMouseLeave={onMouseLeave}\n        onMouseMove={onMouseMove}\n      />\n    </svg>\n  );\n};\n\ninterface TimelineChartRowGroupProps {\n  dataset: ITimelineChartRow[];\n  rowHeight: number;\n  totalDuration: number;\n  timelineStart: number;\n  showTooltip: (...x: unknown[]) => void;\n  hideTooltip: () => void;\n  postRender: () => void;\n}\nconst TimelineChartRowGroup = ({\n  dataset,\n  rowHeight,\n  totalDuration,\n  timelineStart,\n  showTooltip,\n  hideTooltip,\n  postRender\n}: TimelineChartRowGroupProps) => {\n  useEffect(() => {\n    postRender();\n  }, []);\n\n  return (\n    <svg width=\"100%\" height=\"100%\">\n      {dataset.map((data, index) => {\n        return (\n          <TimelineChartRow\n            key={index}\n            rowData={data}\n            rowHeight={rowHeight}\n            rowIndex={index}\n            totalDuration={totalDuration}\n            timelineStart={timelineStart}\n            showTooltip={showTooltip}\n            hideTooltip={hideTooltip}\n          />\n        );\n      })}\n    </svg>\n  );\n};\n\nexport { TimelineChartRowGroup };\n","import { CSSProperties } from 'react';\n\n/**\n * This is the data representing a single row on the Timeline chart.\n */\nexport interface ITimelineChartRow {\n  /**\n   * An array of tasks to be displayed on the row.\n   */\n  tasks?: ITimelineChartTask[];\n\n  /**\n   * An array of milestones to be displayed on the row.\n   */\n  milestones?: ITimelineChartMileStone[];\n\n  /**\n   * The label for the row.\n   */\n  label: string;\n\n  /**\n   * The number of the row on the chart. It is a zero-indexed number so\n   * the first row is number 0.\n   */\n  rowNumber?: number;\n\n  /**\n   * The color for the tasks on the row. This can be overridden by the\n   * task or milestone component if a value is specified for them. Any\n   * valid CSS color will do. If not specified, a random color is used.\n   */\n  color?: CSSProperties['color'];\n}\n\n/**\n * This is the data representing each task on the row.\n */\nexport interface ITimelineChartTask {\n  /**\n   * A unique id for identifying the task or milestone in the timeline.\n   * This id must be provided if this task or milestone is connected to\n   * another task or milestone because it will be used to render the\n   * connection arrow between the two tasks. Without it, no arrow will\n   * be drawn.\n   */\n  id?: string;\n\n  /**\n   * The start time of the task or milestone. This is used to determine the\n   * proportional starting point of the task or milestone on the timeline.\n   */\n  start: number;\n\n  /**\n   * The duration of the task. This is used to determine the proportional\n   * ending point of the task on the timeline.\n   */\n  duration: number;\n\n  /**\n   * The label of the task in the row. If not provided, the label of the\n   * `ITimelineChartRow` is used.\n   */\n  label?: string;\n\n  /**\n   * The color of the task in the row. If not provided, the color\n   * of the `ITimelineChartRow` is used. Any valid CSS color will do.\n   */\n  color?: CSSProperties['color'];\n\n  /**\n   * A list of relationships between the task and other tasks on\n   * the timeline.\n   */\n  connections?: ITimelineChartConn[];\n}\n\n/**\n * The data representing the connection between two tasks on the timeline.\n * The tasks can be on the same row or on different rows.\n */\nexport interface ITimelineChartConn {\n  /**\n   * The type of connection between a task and another task whose Id is\n   * specified by `itemId`.\n   */\n  type?: TimelineChartConnection;\n\n  /**\n   * The id of the task to be connected to. If the id does not exist, no\n   * connection is made.\n   */\n  itemId: string;\n}\n\nexport enum TimelineChartConnection {\n  Finish_To_Start = 'F2S',\n  Start_To_Finish = 'S2F',\n  Start_To_Start = 'S2S',\n  Finish_To_Finish = 'F2F'\n}\n\nexport type ITimelineChartMileStone = Omit<ITimelineChartTask, 'duration'>;\n","import { ThemingParameters, useIsomorphicLayoutEffect } from '@ui5/webcomponents-react-base';\nimport React, { ReactElement, useState } from 'react';\nimport {\n  ITimelineChartMileStone,\n  ITimelineChartRow,\n  ITimelineChartTask,\n  TimelineChartConnection\n} from '../types/TimelineChartTypes';\nimport { ARROWHEAD_HEIGHT, ARROWHEAD_WIDTH, ARROW_CLEARANCE } from '../util/constants';\n\ninterface TimelineChartConnectionsProps {\n  dataSet: ITimelineChartRow[];\n\n  /**\n   * The row height. This is used to calculate drawing the\n   * connection arrows.\n   */\n  rowHeight: number;\n\n  /**\n   * The width of the chart body.\n   * This is required to help rerender the arrows when the size\n   * of the chart body changes.\n   */\n  width: number;\n\n  /**\n   * This is required to get the bounding box of the chart body\n   * and to be able to calculate the relative positions of the\n   * start and end points of the connection arrows based on the\n   * bounding box parameters of the chart body.\n   */\n  bodyRect: DOMRect;\n}\n\ninterface ConnectionData {\n  startX: number;\n  startY: number;\n  endX: number;\n  endY: number;\n  connection: TimelineChartConnection;\n}\n\n/**\n * This holds all the arrows that show the connections between different tasks.\n */\nconst TimelineChartConnections = ({ dataSet, width, rowHeight, bodyRect }: TimelineChartConnectionsProps) => {\n  const [connectionDataState, setConnectionDataState] = useState<ConnectionData[]>([]);\n  useIsomorphicLayoutEffect(() => {\n    const connectionDataArray: ConnectionData[] = [];\n\n    for (let index = 0; index < dataSet.length; index++) {\n      const row = dataSet[index];\n      if (row.tasks) generateConnectionData(row.tasks, bodyRect, connectionDataArray);\n      if (row.milestones) generateConnectionData(row.milestones, bodyRect, connectionDataArray);\n    }\n\n    setConnectionDataState(connectionDataArray);\n  }, [width]);\n\n  return (\n    <svg width=\"100%\" height=\"100%\">\n      {connectionDataState.map((data, index) => {\n        return (\n          <ConnectionArrow\n            startX={data.startX}\n            endX={data.endX}\n            startY={data.startY}\n            endY={data.endY}\n            key={index}\n            rowHeight={rowHeight}\n            depType={data.connection}\n          />\n        );\n      })}\n    </svg>\n  );\n};\n\ninterface ConnectionArrowProps {\n  depType: TimelineChartConnection;\n  rowHeight: number;\n  startX: number;\n  startY: number;\n  endX: number;\n  endY: number;\n}\n\n/**\n * This component represents the physical arrow that indicates\n * the type of connection between two tasks or items on the\n * chart.\n */\nconst ConnectionArrow = ({ depType, rowHeight, startX, startY, endX, endY }: ConnectionArrowProps) => {\n  const halfRowHeight = 0.5 * rowHeight;\n  const finishX = endX;\n\n  const finishY = endY;\n\n  const arrowColor = ThemingParameters.sapTextColor;\n  if (startX === finishX && startY === finishY) {\n    // render nothing if the points overlap\n    return null;\n  }\n\n  if (depType === TimelineChartConnection.Finish_To_Start) {\n    return generateF2SArrow(startX, startY, finishX, finishY, arrowColor, halfRowHeight);\n  }\n\n  if (depType === TimelineChartConnection.Start_To_Finish) {\n    return generateS2FArrow(startX, startY, finishX, finishY, arrowColor, halfRowHeight);\n  }\n\n  if (depType === TimelineChartConnection.Start_To_Start) {\n    return generateS2SArrow(startX, startY, finishX, finishY, arrowColor);\n  }\n\n  if (depType === TimelineChartConnection.Finish_To_Finish) {\n    return generateF2FArrow(startX, startY, finishX, finishY, arrowColor);\n  }\n};\n\n// Generates the finish-to-start arrow\nconst generateF2SArrow = (\n  startX: number,\n  startY: number,\n  finishX: number,\n  finishY: number,\n  color: string,\n  halfRowHeight: number\n): ReactElement => {\n  return (\n    <>\n      {generateStartingPoint(startX, startY, color)}\n      {startX >= finishX || finishX - startX < 2 * ARROW_CLEARANCE ? (\n        <path\n          d={`M ${startX} ${startY}\n            h ${ARROW_CLEARANCE}\n            v ${finishY > startY ? halfRowHeight : -halfRowHeight}\n            H ${finishX - ARROW_CLEARANCE}\n            V ${finishY}\n            H ${finishX}`}\n          stroke={color}\n          fill=\"transparent\"\n        />\n      ) : (\n        <path\n          d={`M ${startX} ${startY}\n            h ${ARROW_CLEARANCE}\n            V ${finishY}\n            H ${finishX}`}\n          stroke={color}\n          fill=\"transparent\"\n        />\n      )}\n      {generateStartFacingHead(finishX, finishY, color)}\n    </>\n  );\n};\n\n// Generate start-to-finish arrow\nconst generateS2FArrow = (\n  startX: number,\n  startY: number,\n  finishX: number,\n  finishY: number,\n  color: string,\n  halfRowHeight: number\n): ReactElement => {\n  return (\n    <>\n      {generateStartingPoint(startX, startY, color)}\n      {startX <= finishX || startX - finishX < 2 * ARROW_CLEARANCE ? (\n        <path\n          d={`M ${startX} ${startY}\n            h ${-ARROW_CLEARANCE}\n            v ${finishY > startY ? halfRowHeight : -halfRowHeight}\n            H ${finishX + ARROW_CLEARANCE}\n            V ${finishY}\n            H ${finishX}`}\n          stroke={color}\n          fill=\"transparent\"\n        />\n      ) : (\n        <path\n          d={`M ${startX} ${startY}\n            h ${-ARROW_CLEARANCE}\n            V ${finishY}\n            H ${finishX}`}\n          stroke={color}\n          fill=\"transparent\"\n        />\n      )}\n      {generateEndFacingHead(finishX, finishY, color)}\n    </>\n  );\n};\n\n// Generate start-to-start arrow\nconst generateS2SArrow = (\n  startX: number,\n  startY: number,\n  finishX: number,\n  finishY: number,\n  color: string\n): ReactElement => {\n  return (\n    <>\n      {generateStartingPoint(startX, startY, color)}\n      <path\n        d={`M ${startX} ${startY}\n          h ${startX <= finishX ? -ARROW_CLEARANCE : finishX - startX - ARROW_CLEARANCE}\n          V ${finishY}\n          H ${finishX}`}\n        stroke={color}\n        fill=\"transparent\"\n      />\n      {generateStartFacingHead(finishX, finishY, color)}\n    </>\n  );\n};\n\n// Generate finish-to-finish arrow\nconst generateF2FArrow = (\n  startX: number,\n  startY: number,\n  finishX: number,\n  finishY: number,\n  color: string\n): ReactElement => {\n  return (\n    <>\n      {generateStartingPoint(startX, startY, color)}\n      <path\n        d={`M ${startX} ${startY}\n          h ${startX >= finishX ? ARROW_CLEARANCE : finishX - startX + ARROW_CLEARANCE}\n          V ${finishY}\n          H ${finishX}`}\n        stroke={color}\n        fill=\"transparent\"\n      />\n      {generateEndFacingHead(finishX, finishY, color)}\n    </>\n  );\n};\n\n// Create the starting point indicator\nconst generateStartingPoint = (x: number, y: number, color: string): ReactElement => {\n  return <circle cx={`${x}`} cy={`${y}`} r=\"1\" fill={color} />;\n};\n\n// Create an arrowhead pointing to a task start.\nconst generateStartFacingHead = (finishX: number, finishY: number, color: string): ReactElement => {\n  return (\n    <polygon\n      points={`${finishX}, ${finishY} \n        ${finishX - ARROWHEAD_HEIGHT}, ${finishY - ARROWHEAD_WIDTH / 2} \n        ${finishX - ARROWHEAD_HEIGHT}, ${finishY + ARROWHEAD_WIDTH / 2}`}\n      fill={color}\n    />\n  );\n};\n\n// Create an arrowhead pointing to a task end.\nconst generateEndFacingHead = (finishX: number, finishY: number, color: string): ReactElement => {\n  return (\n    <polygon\n      points={`${finishX}, ${finishY} \n        ${finishX + ARROWHEAD_HEIGHT}, ${finishY - ARROWHEAD_WIDTH / 2} \n        ${finishX + ARROWHEAD_HEIGHT}, ${finishY + ARROWHEAD_WIDTH / 2}`}\n      fill={color}\n    />\n  );\n};\n\nconst generateConnectionData = (\n  activities: ITimelineChartTask[] | ITimelineChartMileStone[],\n  bodyRect: DOMRect,\n  connectionDataArray: ConnectionData[]\n) => {\n  for (let i = 0; i < activities.length; i++) {\n    const activity = activities[i];\n    if (activity.connections == null) continue;\n    const startItem = document.getElementById(activity.id);\n    if (startItem == null) continue;\n\n    // Get the start points based on the type of connection\n    const { x, y, right, height } = startItem.getBoundingClientRect();\n    const startY = y + height / 2 - bodyRect.y; // Always same no matter the connection type.\n\n    let startX: number;\n    activity.connections.forEach((item) => {\n      if (item.type == null) {\n        item.type = TimelineChartConnection.Finish_To_Start;\n      }\n      const endItem = document.getElementById(item.itemId);\n      if (endItem == null) return;\n\n      if (\n        item.type === TimelineChartConnection.Finish_To_Finish ||\n        item.type === TimelineChartConnection.Finish_To_Start\n      ) {\n        startX = right - bodyRect.x;\n      } else {\n        startX = x - bodyRect.x;\n      }\n\n      // Get the end points based on the type of connection\n      const { x: otherX, y: otherY, right: otherR } = endItem.getBoundingClientRect();\n      const endY = otherY + height / 2 - bodyRect.y; // Always same no matter the connection type.\n      let endX: number;\n\n      if (\n        item.type === TimelineChartConnection.Start_To_Start ||\n        item.type === TimelineChartConnection.Finish_To_Start\n      ) {\n        endX = otherX - bodyRect.x;\n      } else {\n        endX = otherR - bodyRect.x;\n      }\n\n      connectionDataArray.push({\n        startX,\n        startY,\n        endX,\n        endY,\n        connection: item.type\n      });\n    });\n  }\n};\n\nexport { TimelineChartConnections };\n","import React, { CSSProperties, forwardRef, ReactNode, useEffect, useImperativeHandle, useRef, useState } from 'react';\nimport { ITimelineChartRow } from '../types/TimelineChartTypes';\nimport { MAX_BODY_WIDTH, SCALE_FACTOR } from '../util/constants';\nimport { TimelineChartBodyCtx } from '../util/context';\nimport { useStyles } from '../util/styles';\nimport { TimelineChartGrid } from './TimelineChartGrid';\nimport { TimelineChartLayer } from './TimelineChartLayer';\nimport { TimelineChartRowGroup } from './TimelineChartRow';\nimport { TimelineChartConnections } from './TimelineConnections';\n\ninterface TimelineChartBodyProps {\n  dataset: ITimelineChartRow[];\n  width?: number;\n  height?: number;\n  rowHeight: number;\n  numOfItems: number;\n  totalDuration: number;\n  isDiscrete: boolean;\n  annotations?: ReactNode | ReactNode[];\n  showAnnotation?: boolean;\n  showConnection?: boolean;\n  showTooltip?: boolean;\n  unit: string;\n  start: number;\n  unscaledWidth?: number;\n  onScale: (x: number) => void;\n  valueFormat?: (value: number) => string;\n  resetScroll: () => void;\n}\n\nconst TimelineChartBody = ({\n  dataset,\n  width,\n  rowHeight,\n  numOfItems,\n  totalDuration,\n  isDiscrete,\n  annotations,\n  showAnnotation,\n  showConnection,\n  showTooltip,\n  unit,\n  start,\n  unscaledWidth,\n  onScale,\n  valueFormat,\n  resetScroll\n}: TimelineChartBodyProps) => {\n  const classes = useStyles();\n  const tooltipRef = useRef<TimelineTooltipHandle>(null);\n  const bodyRef = useRef<HTMLDivElement>(null);\n  const scaleExpRef = useRef(0);\n  const [displayArrows, setDisplayArrows] = useState(false);\n\n  useEffect(() => {\n    bodyRef.current?.addEventListener('wheel', onMouseWheelEvent);\n    return () => {\n      bodyRef.current?.removeEventListener('wheel', onMouseWheelEvent);\n    };\n  }, []);\n\n  const style: CSSProperties = {\n    width: `${width}px`,\n    height: `${numOfItems * rowHeight}px`\n  };\n\n  const showTooltipOnHover = (\n    mouseX: number,\n    mouseY: number,\n    label: string,\n    startTime: number,\n    duration: number,\n    color: string,\n    isMilestone: boolean\n  ) => {\n    tooltipRef.current?.onHoverItem(mouseX, mouseY, label, startTime, duration, color, isMilestone);\n  };\n  const hideTooltip = () => tooltipRef.current?.onLeaveItem();\n\n  const onMouseWheelEvent = (evt: WheelEvent) => {\n    evt.preventDefault();\n    if (evt.deltaY < 0) {\n      // Only scale up if scaled width will not exceed MAX_BODY_WIDTH\n      const msrWidth = bodyRef.current.getBoundingClientRect().width;\n      if (msrWidth * SCALE_FACTOR < MAX_BODY_WIDTH) {\n        scaleExpRef.current++;\n      }\n    } else {\n      // Only scale down if scaled width will not be less than original\n      // width\n      if (scaleExpRef.current > 0) {\n        resetScroll();\n        scaleExpRef.current--;\n      }\n    }\n    onScale(Math.pow(SCALE_FACTOR, scaleExpRef.current));\n  };\n\n  const showArrows = () => setDisplayArrows(true);\n\n  return (\n    <div data-component-name=\"TimelineChartBody\" ref={bodyRef} className={classes.chartBody} style={style}>\n      <TimelineChartLayer name=\"TimelineChartGridLayer\" ignoreClick>\n        <TimelineChartGrid\n          isDiscrete={isDiscrete}\n          numOfRows={numOfItems}\n          totalDuration={totalDuration}\n          rowHeight={rowHeight}\n          width={width}\n          unscaledWidth={unscaledWidth}\n        />\n      </TimelineChartLayer>\n\n      {showConnection && displayArrows ? (\n        <TimelineChartLayer name=\"TimelineChartConnectionLayer\" ignoreClick>\n          <TimelineChartConnections\n            dataSet={dataset}\n            width={width}\n            rowHeight={rowHeight}\n            bodyRect={bodyRef.current?.getBoundingClientRect()}\n          />\n        </TimelineChartLayer>\n      ) : null}\n\n      <TimelineChartLayer name=\"TimelineChartRowsLayer\" ignoreClick>\n        <TimelineChartRowGroup\n          dataset={dataset}\n          rowHeight={rowHeight}\n          totalDuration={totalDuration}\n          timelineStart={start}\n          showTooltip={showTooltipOnHover}\n          hideTooltip={hideTooltip}\n          postRender={showArrows}\n        />\n      </TimelineChartLayer>\n\n      {showAnnotation && annotations != null ? (\n        <TimelineChartLayer name=\"TimelineChartAnnotationLayer\" isAnnotation ignoreClick>\n          <TimelineChartBodyCtx.Provider value={{ chartBodyWidth: width }}>{annotations}</TimelineChartBodyCtx.Provider>\n        </TimelineChartLayer>\n      ) : null}\n\n      {showTooltip ? <TimelineChartTooltip ref={tooltipRef} unit={unit} valueFormat={valueFormat} /> : null}\n    </div>\n  );\n};\n\ninterface TimelineTooltipHandle {\n  onHoverItem: (\n    mouseX: number,\n    mouseY: number,\n    label: string,\n    startTime: number,\n    duration: number,\n    color: string,\n    isMilestone: boolean\n  ) => void;\n  onLeaveItem: () => void;\n}\n\ninterface TimelineTooltipChartProps {\n  unit: string;\n  valueFormat?: (value: number) => string;\n}\n\nconst TimelineChartTooltip = forwardRef<TimelineTooltipHandle, TimelineTooltipChartProps>(function TimelineChartTooltip(\n  { unit, valueFormat },\n  ref\n) {\n  const [state, setState] = useState({\n    x: 0,\n    y: 0,\n    label: '',\n    visible: false,\n    startTime: 0,\n    duration: 0,\n    color: 'black',\n    isMilestone: false\n  });\n  const divRef = useRef<HTMLDivElement>(null);\n  const popupRef = useRef<HTMLSpanElement>(null);\n  const classes = useStyles();\n\n  const onHoverItem = (\n    mouseX: number,\n    mouseY: number,\n    label: string,\n    startTime: number,\n    duration: number,\n    color: string,\n    isMilestone: boolean\n  ) => {\n    const { x, y, width, height } = divRef.current?.getBoundingClientRect();\n    // Adjust the x and y position of the tooltip popover in order to try\n    // to prevent it from being cut off by the bounds of the parent div.\n    const offSetX = mouseX - x;\n    const offSetY = mouseY - y;\n    const xPos = offSetX < width - 80 ? offSetX : offSetX - 120;\n    const yPos = offSetY < height - 70 ? offSetY : offSetY - 70;\n    setState({ x: xPos, y: yPos, label, visible: true, startTime, duration, color, isMilestone });\n  };\n\n  const onLeaveItem = () => {\n    setState({ ...state, visible: false });\n  };\n\n  useImperativeHandle(ref, () => ({\n    onHoverItem: onHoverItem,\n    onLeaveItem: onLeaveItem\n  }));\n\n  return (\n    <div data-component-name=\"TimelineChartTooltipContainer\" className={classes.tooltipContainer} ref={divRef}>\n      {state.visible ? (\n        <span\n          data-component-name=\"TimelineChartTooltip\"\n          className={classes.tooltip}\n          ref={popupRef}\n          style={{\n            insetInlineStart: state.x,\n            insetBlockStart: state.y\n          }}\n        >\n          <span className={classes.tooltipLabel}>\n            <strong>{state.label}</strong>\n          </span>\n          <span className={classes.tooltipColorBar} style={{ backgroundColor: state.color }}></span>\n          <span>\n            Start: {valueFormat != null ? valueFormat(state.startTime) : state.startTime}\n            {unit}\n          </span>\n          {state.isMilestone ? null : (\n            <span>\n              Duration: {valueFormat != null ? valueFormat(state.duration) : state.duration}\n              {unit}\n            </span>\n          )}\n          <span>\n            End:{' '}\n            {valueFormat != null ? valueFormat(state.startTime + state.duration) : state.startTime + state.duration}\n            {unit}\n          </span>\n        </span>\n      ) : null}\n    </div>\n  );\n});\n\nexport { TimelineChartBody };\n","import { ThemingParameters } from '@ui5/webcomponents-react-base';\nimport React from 'react';\nimport ContentLoader, { IContentLoaderProps } from 'react-content-loader';\n\nexport const TimelineChartPlaceholder = (props: IContentLoaderProps) => {\n  return (\n    <ContentLoader\n      viewBox=\"0 0 600 150\"\n      preserveAspectRatio=\"xMidYMid meet\"\n      width=\"100%\"\n      height=\"150\"\n      speed={2}\n      backgroundColor={ThemingParameters.sapContent_ImagePlaceholderBackground}\n      foregroundColor={ThemingParameters.sapContent_ImagePlaceholderForegroundColor}\n      backgroundOpacity={ThemingParameters.sapContent_DisabledOpacity as unknown as number}\n      {...props}\n    >\n      <rect x=\"0\" y=\"0\" width=\"149.5\" height=\"49.5\" />\n      <rect x=\"150\" y=\"0\" width=\"450\" height=\"49.5\" />\n      <rect x=\"0\" y=\"50\" width=\"149.5\" height=\"24.5\" />\n      <rect x=\"150\" y=\"50\" width=\"450\" height=\"24.5\" />\n      <rect x=\"0\" y=\"75\" width=\"149.5\" height=\"24.5\" />\n      <rect x=\"150\" y=\"75\" width=\"450\" height=\"24.5\" />\n      <rect x=\"0\" y=\"100\" width=\"149.5\" height=\"24.5\" />\n      <rect x=\"150\" y=\"100\" width=\"450\" height=\"24.5\" />\n      <rect x=\"0\" y=\"125\" width=\"149.5\" height=\"25\" />\n      <rect x=\"150\" y=\"125\" width=\"450\" height=\"25\" />\n    </ContentLoader>\n  );\n};\n","import { ThemingParameters } from '@ui5/webcomponents-react-base';\nimport React, { CSSProperties, ReactElement, useEffect, useState } from 'react';\nimport { ITimelineChartRow } from './types/TimelineChartTypes';\nimport { DEFAULT_CHART_VERTICAL_COLS, SPACING, TICK_LENGTH, TOLERANCE } from './util/constants';\nimport { useStyles } from './util/styles';\n\ninterface TimelineChartRowLabelsProps {\n  width: number;\n  height: number;\n  rowHeight: number;\n  dataset: ITimelineChartRow[];\n}\n\nconst TimelineChartRowLabels = ({ width, height, rowHeight, dataset }: TimelineChartRowLabelsProps) => {\n  const classes = useStyles();\n  const rowLabels = dataset.map((data) => data.label);\n  const style: CSSProperties = {\n    width: width,\n    height: `${rowLabels.length * rowHeight}px`\n  };\n\n  const itemStyle: CSSProperties = {\n    height: `${rowHeight}px`,\n    lineHeight: `${rowHeight}px`\n  };\n\n  return (\n    <div style={{ height: height }}>\n      <div className={classes.rowLabels} style={style}>\n        {rowLabels.map((label, index) => {\n          return (\n            <div key={index} className={classes.rowLabelsItem} style={itemStyle}>\n              <span style={{ paddingInline: '10px' }} title={`Item ${label}`}>\n                {label}\n              </span>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\ninterface TimelineChartColumnLabelProps {\n  width: number;\n  height: number;\n  isDiscrete: boolean;\n  totalDuration: number;\n  unit: string;\n  columnLabels?: string[];\n  start: number;\n  unscaledWidth: number;\n  valueFormat?: (value: number) => string;\n}\n\nconst TimelineChartColumnLabel = ({\n  width,\n  height,\n  isDiscrete,\n  totalDuration,\n  columnLabels,\n  start,\n  unscaledWidth,\n  valueFormat\n}: TimelineChartColumnLabelProps) => {\n  const classes = useStyles();\n  const [labelArray, setLabelArray] = useState<string[]>([]);\n  useEffect(() => {\n    if (isDiscrete) {\n      const newLabelArray = columnLabels\n        ? columnLabels\n        : Array.from(Array(totalDuration).keys()).map((num) => `${num + start}`);\n      setLabelArray(newLabelArray);\n    }\n  }, [isDiscrete]);\n\n  const style: CSSProperties = {\n    width: width,\n    height: height\n  };\n\n  const halfHeaderHeight = 0.5 * height;\n  const verticalSegmentWidth = unscaledWidth / DEFAULT_CHART_VERTICAL_COLS;\n\n  return (\n    <div className={classes.columnLabel} style={style}>\n      <div\n        className={classes.columnTitlePlaceHolder}\n        style={{\n          height: `${halfHeaderHeight}px`,\n          lineHeight: `${halfHeaderHeight}px`\n        }}\n      ></div>\n      {isDiscrete ? (\n        <div\n          className={classes.columnLabelItems}\n          style={{\n            height: `${halfHeaderHeight}px`,\n            gridTemplateColumns: `repeat(${totalDuration}, 1fr)`,\n            lineHeight: `${halfHeaderHeight}px`\n          }}\n        >\n          {labelArray.map((label, index) => {\n            return (\n              <span\n                data-component-name=\"TimelineChartColumnLabel\"\n                className={classes.onlyOutline}\n                key={index}\n                title={`${label}`}\n              >\n                {label}\n              </span>\n            );\n          })}\n        </div>\n      ) : (\n        <svg height={halfHeaderHeight} width=\"100%\" fontFamily=\"Helvetica\" fontSize=\"9\">\n          <>\n            <g stroke={ThemingParameters.sapList_BorderColor} strokeWidth=\"4\">\n              <line x1={0} x2={0} y1=\"100%\" y2={halfHeaderHeight - TICK_LENGTH} />\n              <line x1=\"100%\" x2=\"100%\" y1=\"100%\" y2={halfHeaderHeight - TICK_LENGTH} />\n            </g>\n            <g fill={ThemingParameters.sapTextColor}>\n              <text x={0} dx={SPACING} y={halfHeaderHeight - TICK_LENGTH} dy={-SPACING}>\n                {valueFormat != null ? valueFormat(start) : start}\n              </text>\n              <text x=\"100%\" dx={-SPACING} y={halfHeaderHeight - TICK_LENGTH} dy={-SPACING} textAnchor=\"end\">\n                {valueFormat != null ? valueFormat(start + totalDuration) : start + totalDuration}\n              </text>\n            </g>\n            {generateIntermediateTicks(\n              start,\n              totalDuration,\n              width,\n              halfHeaderHeight,\n              TICK_LENGTH,\n              verticalSegmentWidth,\n              SPACING,\n              valueFormat\n            )}\n          </>\n        </svg>\n      )}\n    </div>\n  );\n};\n\nconst generateIntermediateTicks = (\n  start: number,\n  totalDuration: number,\n  width: number,\n  halfHeaderHeight: number,\n  tickLength: number,\n  verticalSegmentWidth: number,\n  spacing: number,\n  valueFormat?: (value: number) => string\n): ReactElement => {\n  let covered = verticalSegmentWidth;\n  let remaining = width;\n  const lineArray: ReactElement[] = [];\n  const textArray: ReactElement[] = [];\n  if (verticalSegmentWidth <= 0) return null;\n  while (remaining >= 2 * verticalSegmentWidth - TOLERANCE) {\n    lineArray.push(\n      <line\n        x1={covered}\n        x2={covered}\n        y1=\"100%\"\n        y2={halfHeaderHeight - tickLength}\n        stroke={ThemingParameters.sapList_BorderColor}\n        strokeWidth=\"2\"\n        key={`${covered}tickline`}\n      />\n    );\n    const val = (covered / width) * totalDuration;\n    textArray.push(\n      <text\n        x={covered}\n        y={halfHeaderHeight - tickLength}\n        dy={-spacing}\n        fill={ThemingParameters.sapTextColor}\n        textAnchor=\"middle\"\n        key={`${covered}tickval`}\n      >\n        {valueFormat != null ? valueFormat(start + val) : start + val}\n      </text>\n    );\n    covered += verticalSegmentWidth;\n    remaining -= verticalSegmentWidth;\n  }\n  return (\n    <>\n      {lineArray}\n      {textArray}\n    </>\n  );\n};\n\ninterface TimelineChartRowTitleProps {\n  width: number;\n  height: number;\n  rowTitle: string;\n}\n\nconst TimelineChartRowTitle = ({ width, height, rowTitle }: TimelineChartRowTitleProps) => {\n  const classes = useStyles();\n  const style: CSSProperties = {\n    width: width,\n    height: height,\n    color: ThemingParameters.sapTitleColor\n  };\n  return (\n    <div className={classes.onlyOutline} style={style}>\n      <div className={classes.rowTitleTop}></div>\n      <div className={classes.rowTitleBottom}>{rowTitle}</div>\n    </div>\n  );\n};\n\nexport { TimelineChartColumnLabel, TimelineChartRowTitle, TimelineChartRowLabels };\n","export class IllegalConnectionError extends Error {\n  public constructor(message: string) {\n    super(message);\n    this.name = 'IllegalConnectionError';\n  }\n}\n\nexport class InvalidDiscreteLabelError extends Error {\n  public constructor(message: string) {\n    super(message);\n    this.name = 'InvalidDiscreteLabelError';\n  }\n}\n","import { CommonProps } from '@ui5/webcomponents-react';\nimport { throttle } from '@ui5/webcomponents-react-base';\nimport React, { CSSProperties, forwardRef, ReactNode, useEffect, useRef, useState } from 'react';\nimport { TimelineChartBody } from './chartbody/TimelineChartBody';\nimport { TimelineChartPlaceholder } from './Placeholder';\nimport { TimelineChartColumnLabel, TimelineChartRowTitle, TimelineChartRowLabels } from './TimelineChartHeaders';\nimport { ITimelineChartRow } from './types/TimelineChartTypes';\nimport {\n  DEFAULT_ROW_HEIGHT,\n  DEFAULT_WIDTH,\n  COLUMN_HEADER_HEIGHT,\n  ILLEGAL_CONNECTION_MESSAGE,\n  INVALID_DISCRETE_LABELS_MESSAGE,\n  MOUSE_CURSOR_AUTO,\n  MOUSE_CURSOR_GRAB,\n  MOUSE_CURSOR_GRABBING,\n  ROW_TITLE_WIDTH\n} from './util/constants';\nimport { IllegalConnectionError, InvalidDiscreteLabelError } from './util/error';\nimport { useStyles } from './util/styles';\n\ninterface TimelineChartProps extends CommonProps {\n  /**\n   * The data is an array of objects that is displayed on the chart.\n   */\n  dataset?: ITimelineChartRow[];\n\n  /**\n   * The total duration of the timeline.\n   */\n  totalDuration?: number;\n\n  /**\n   * The total width of the chart. If not supplied, the chart's\n   * width expands to fill its conatainer.\n   */\n  width?: CSSProperties['width'];\n\n  /**\n   * The height the row of the timeline.\n   */\n  rowHeight?: number;\n\n  /**\n   * Whether the timeline is a continuous timeline or broken\n   * into discrete sections.\n   */\n  isDiscrete?: boolean;\n\n  /**\n   * Defines the annonations to be applied on top on the chart.\n   *\n   * **Note:** Use the `TimelineChartAnnotation` component here.\n   */\n  annotations?: ReactNode | ReactNode[];\n\n  /**\n   * Toggles the visibility of the annotations applied to the chart.\n   */\n  showAnnotation?: boolean;\n\n  /**\n   * Toggles the visibility of the connections of the task and milestone\n   * items in the chart.\n   */\n  showConnection?: boolean;\n\n  /**\n   * Toggles the visibility of the tooltip.\n   */\n  hideTooltip?: boolean;\n\n  /**\n   * The unit of the duration of the timeline.\n   */\n  unit?: string;\n\n  /**\n   * The label for the activity axis.\n   */\n  rowTitle?: string;\n\n  /**\n   * The label for the title of the duration axis.\n   */\n  columnTitle?: string;\n\n  /**\n   * The label for the columns if the chart is separated into discrete columns\n   * based on if `isDiscrete` is true. If set, the lenght of this array\n   * <strong>must</strong> be equal to the `totalDuration`. If not set, an\n   * array of numbers with size equal to the `totalDuration` and with values\n   * starting from the value __start__ prop of the `TimelineChart` will be used.\n   */\n  discreteLabels?: string[];\n\n  /**\n   * The starting value of the timeline duration.\n   */\n  start?: number;\n\n  /**\n   * A callback function that is applied to each value in the tick and tootltip\n   * to format how it is displayed.\n   */\n  valueFormat?: (value: number) => string;\n}\n\n/**\n * > __Experimental Component!__ <br />\n * > This component is experimental and not subject to semantic versioning.\n * > Therefore, you could face breaking changes when updating versions.\n * > Please use with caution!\n *\n * A `TimelineChart` is a data visualization chart that can be used to represent\n * Gantt charts or any other timeline-based visualizations. The component has a\n * rich set of various properties that allows the user to:\n * * Zoom the chart body to see the visualizations clearer using the mouse wheel.\n * * Pan the zoomed chart horizonatally by holding down the left click button.\n * * Add annotations to highlight or illustrate different points on the timeline.\n * * Use annotations to create custom Timeline visualizations.\n * * Choose whether the timeline is discrete or continous.\n * * Show relationships between different items on the timeline using different\n * connections.\n */\nconst TimelineChart = forwardRef<HTMLDivElement, TimelineChartProps>(\n  (\n    {\n      dataset,\n      totalDuration = 10,\n      width = DEFAULT_WIDTH,\n      rowHeight = DEFAULT_ROW_HEIGHT,\n      isDiscrete,\n      annotations,\n      showAnnotation,\n      showConnection,\n      hideTooltip,\n      unit,\n      rowTitle = 'Activities',\n      columnTitle = 'Duration',\n      discreteLabels,\n      start = 0,\n      valueFormat = (x: number) => x.toFixed(1),\n      ...rest\n    },\n    fRef\n  ) => {\n    if (!dataset || dataset?.length === 0) {\n      return <TimelineChartPlaceholder />;\n    }\n\n    const numOfRows = dataset.length;\n    const height = rowHeight * numOfRows + COLUMN_HEADER_HEIGHT;\n\n    const style: CSSProperties = {\n      height: `${height}px`,\n      width: width,\n      gridTemplateColumns: `${ROW_TITLE_WIDTH}px auto`\n    };\n\n    const ref = useRef(null);\n    const bodyConRef = useRef<HTMLDivElement>(null);\n    const [dimensions, setDimensions] = useState({\n      width: 0,\n      height: 0,\n      chartWidth: 0,\n      chartHeight: 0\n    });\n    const [chartBodyScale, setChartBodyScale] = useState(1);\n    const [isGrabbed, setIsGrabbed] = useState(false);\n    const [mPos, setMPos] = useState(0);\n    const classes = useStyles();\n\n    useEffect(() => {\n      const ro = new ResizeObserver((entries) => {\n        entries.forEach((entry) => {\n          const width = entry.contentBoxSize[0].inlineSize;\n          const height = entry.contentBoxSize[0].blockSize;\n          setDimensions({\n            width: width,\n            height: height,\n            chartWidth: width - ROW_TITLE_WIDTH,\n            chartHeight: height - COLUMN_HEADER_HEIGHT\n          });\n          setChartBodyScale(1);\n        });\n      });\n      if (ref.current != null) ro.observe(ref.current);\n      return () => ro.disconnect();\n    }, []);\n\n    useEffect(() => {\n      if (isDiscrete && discreteLabels != null && discreteLabels.length !== totalDuration) {\n        throw new InvalidDiscreteLabelError(INVALID_DISCRETE_LABELS_MESSAGE);\n      }\n    }, [isDiscrete, discreteLabels, totalDuration]);\n\n    useEffect(() => {\n      if (showConnection && dataset.length !== 0) {\n        validateConnections(dataset);\n      }\n    }, [showConnection, dataset]);\n\n    const scaleChartBody = (value: number) => setChartBodyScale(value);\n\n    const resetScroll = () => {\n      bodyConRef.current.scrollTo({ left: 0 });\n    };\n\n    const onMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n      if (chartBodyScale > 1) {\n        setIsGrabbed(true);\n        setMPos(e.clientX);\n      }\n    };\n\n    const onMouseUp = () => {\n      if (chartBodyScale > 1) setIsGrabbed(false);\n    };\n\n    const mouseMoveHandler = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n      if (isGrabbed) {\n        const dx = e.clientX - mPos;\n        // Make negative so that the scrolling can move in\n        // same direction as the mouse\n        bodyConRef.current.scrollBy({ left: -dx });\n        setMPos(e.clientX);\n      }\n    };\n\n    const onMouseMove = throttle(mouseMoveHandler, 200, { trailing: false });\n\n    const getCursor = (): string => {\n      if (isGrabbed) return MOUSE_CURSOR_GRABBING;\n      if (chartBodyScale > 1) return MOUSE_CURSOR_GRAB;\n      return MOUSE_CURSOR_AUTO;\n    };\n\n    const unscaledBodyWidth = dimensions.width - ROW_TITLE_WIDTH;\n    const bodyWidth = unscaledBodyWidth * chartBodyScale;\n\n    return (\n      <div ref={fRef} {...rest}>\n        <div className={classes.main} ref={ref} style={style} data-component-name=\"TimelineChart\">\n          <div style={{ width: ROW_TITLE_WIDTH, height: height }}>\n            <TimelineChartRowTitle width={ROW_TITLE_WIDTH} height={COLUMN_HEADER_HEIGHT} rowTitle={rowTitle} />\n            <TimelineChartRowLabels\n              width={ROW_TITLE_WIDTH}\n              height={height - COLUMN_HEADER_HEIGHT}\n              rowHeight={rowHeight}\n              dataset={dataset}\n            />\n          </div>\n          <div\n            data-component-name=\"TimelineChartBodyContainer\"\n            className={classes.bodyContainer}\n            ref={bodyConRef}\n            style={{\n              width: unscaledBodyWidth,\n              height: height,\n              cursor: getCursor()\n            }}\n            onMouseDown={onMouseDown}\n            onMouseUp={onMouseUp}\n            onMouseMove={onMouseMove}\n          >\n            <div\n              className={classes.columnTitle}\n              style={{\n                width: unscaledBodyWidth,\n                height: COLUMN_HEADER_HEIGHT / 2,\n                lineHeight: `${COLUMN_HEADER_HEIGHT / 2}px`\n              }}\n            >\n              {columnTitle} {unit != null ? `(${unit})` : ''}\n            </div>\n            <TimelineChartColumnLabel\n              width={bodyWidth}\n              height={COLUMN_HEADER_HEIGHT}\n              isDiscrete={isDiscrete}\n              totalDuration={totalDuration}\n              unit={unit}\n              columnLabels={discreteLabels}\n              start={start}\n              unscaledWidth={unscaledBodyWidth}\n              valueFormat={valueFormat}\n            />\n            <TimelineChartBody\n              dataset={dataset}\n              width={bodyWidth}\n              height={height - COLUMN_HEADER_HEIGHT}\n              rowHeight={rowHeight}\n              numOfItems={numOfRows}\n              totalDuration={totalDuration}\n              isDiscrete={isDiscrete}\n              annotations={annotations}\n              showAnnotation={showAnnotation}\n              showConnection={showConnection}\n              showTooltip={!hideTooltip}\n              unit={unit}\n              onScale={scaleChartBody}\n              start={start}\n              valueFormat={valueFormat}\n              resetScroll={resetScroll}\n              unscaledWidth={unscaledBodyWidth}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n);\n\nTimelineChart.displayName = 'TimelineChart';\n\nconst validateConnections = (dataset: ITimelineChartRow[]) => {\n  for (const row of dataset) {\n    if (row.tasks != null) {\n      for (const item of row.tasks) {\n        if (item.connections != null && item.connections.length !== 0 && item.id == null) {\n          throw new IllegalConnectionError(ILLEGAL_CONNECTION_MESSAGE);\n        }\n      }\n    }\n\n    if (row.milestones != null) {\n      for (const item of row.milestones) {\n        if (item.connections != null && item.connections.length !== 0 && item.id == null) {\n          throw new IllegalConnectionError(ILLEGAL_CONNECTION_MESSAGE);\n        }\n      }\n    }\n  }\n};\n\nexport { TimelineChart };\n","import { CommonProps } from '@ui5/webcomponents-react';\nimport React, { CSSProperties, forwardRef, ReactElement } from 'react';\nimport { DEFAULT_ROW_HEIGHT } from './util/constants';\nimport { useStyles } from './util/styles';\n\ninterface TimelineChartAnnotationProps extends CommonProps {\n  /**\n   * The width of the annotation. If not provided, it expands to fill\n   * the timeline.\n   */\n  width?: CSSProperties['width'];\n\n  /**\n   * The height of the annotation. Preferably, this would be the same height as the\n   * rowHeight of the chart. A different height could be set if the annotation\n   * spans multiple rows. If not set, the __rowHeight__  specified for the\n   * `TimelineChartAnnotation` is used.\n   */\n  height?: string;\n\n  /**\n   * The index of the row the annotation should be applied to. The top of the anotation is\n   * aligned with the top of the row.\n   */\n  rowIndex?: number;\n\n  /**\n   * The row height of the chart. This should **always** be set to the same value as\n   * the rowHeight of the chart in order for the top of the annotation to be aligned\n   * with the top of the row the annotation is applied to. If not set, the default\n   * __rowHeight__ of the `TimelineChart` is used.\n   */\n  rowHeight?: number;\n\n  /**\n   * The diagram, symbol or illustration that should be in the annotation. If one\n   * is planning to do a lot of custom annotations on a row, it is probably\n   * advised to use the HTML Canvas for drawing due to performance reasons. And\n   * it is also better to draw all the annotations on one row in the same figure.\n   */\n  figure: JSX.Element;\n}\n\n/**\n * This is designed to be used for creating custom annotations, markers\n * or illustrations on the timeline of the chart.\n */\nconst TimelineChartAnnotation = forwardRef<HTMLDivElement, TimelineChartAnnotationProps>(\n  ({ width = 'auto', height, rowIndex = 0, rowHeight = DEFAULT_ROW_HEIGHT, figure, ...rest }, ref): ReactElement => {\n    const classes = useStyles();\n\n    const style: CSSProperties = {\n      width: width,\n      height: height != null ? height : rowHeight,\n      insetBlockStart: `${rowIndex * rowHeight}px`\n    };\n\n    return (\n      <div\n        ref={ref}\n        className={classes.annotation}\n        {...rest}\n        style={style}\n        data-component-name=\"TimelineChartAnnotation\"\n      >\n        {figure}\n      </div>\n    );\n  }\n);\n\nTimelineChartAnnotation.displayName = 'TimelineChartAnnotation';\n\nexport { TimelineChartAnnotation };\n","import { ITimelineChartRow, TimelineChartConnection } from '../types/TimelineChartTypes';\n\nexport const dummyDataSet: ITimelineChartRow[] = [\n  {\n    label: 'Row 0',\n    color: 'blue',\n    tasks: [\n      {\n        id: 'TR-00',\n        label: 'Item 1',\n        start: 5,\n        duration: 10,\n        connections: [\n          {\n            itemId: 'TR-20',\n            type: TimelineChartConnection.Finish_To_Start\n          }\n        ]\n      },\n      {\n        id: 'TR-01',\n        label: 'Item 2',\n        start: 25,\n        duration: 115,\n        color: 'brown',\n        connections: [\n          {\n            itemId: 'TR-10',\n            type: TimelineChartConnection.Start_To_Start\n          }\n        ]\n      }\n    ],\n    milestones: []\n  },\n  {\n    label: 'Row 1',\n    color: 'red',\n    tasks: [\n      {\n        id: 'TR-10',\n        label: 'Item 3',\n        start: 35,\n        duration: 25,\n        color: 'orange',\n        connections: [\n          {\n            itemId: 'TR-20',\n            type: TimelineChartConnection.Finish_To_Finish\n          }\n        ]\n      },\n      {\n        id: 'TR-11',\n        label: 'Item 4',\n        start: 95,\n        duration: 5,\n        connections: [\n          {\n            itemId: 'MS-20'\n          },\n          {\n            itemId: 'TR-21',\n            type: TimelineChartConnection.Start_To_Start\n          }\n        ]\n      }\n    ],\n    milestones: []\n  },\n  {\n    label: 'Row 2',\n    color: 'purple',\n    tasks: [\n      {\n        id: 'TR-20',\n        label: 'Item 5',\n        start: 35,\n        duration: 15\n      },\n      {\n        id: 'TR-21',\n        start: 75,\n        duration: 25\n      }\n    ],\n    milestones: [\n      {\n        id: 'MS-20',\n        start: 115,\n        label: 'Milestone 11',\n        connections: [\n          {\n            itemId: 'TR-01',\n            type: TimelineChartConnection.Finish_To_Finish\n          }\n        ]\n      }\n    ]\n  }\n];\n\nexport const dummyDiscreteDataSet: ITimelineChartRow[] = [\n  {\n    label: 'Discovery',\n    color: 'blue',\n    tasks: [\n      {\n        id: 'TR-00X',\n        start: 2,\n        duration: 5,\n        connections: [\n          {\n            itemId: 'TR-20X'\n          }\n        ]\n      }\n    ]\n  },\n  {\n    label: 'Branding Exploration',\n    // color: 'red',\n    tasks: [\n      {\n        id: 'TR-10X',\n        start: 11,\n        duration: 5,\n        connections: [\n          {\n            itemId: 'MS-30X'\n          }\n        ]\n      }\n    ]\n  },\n  {\n    label: 'Content Review',\n    tasks: [\n      {\n        id: 'TR-20X',\n        start: 6,\n        duration: 5,\n        connections: [\n          {\n            itemId: 'TR-10X'\n          }\n        ]\n      }\n    ]\n  },\n  {\n    label: '',\n    milestones: [\n      {\n        id: 'MS-30X',\n        label: 'Phase 1',\n        start: 16,\n        connections: [\n          {\n            itemId: 'TR-40X'\n          },\n          {\n            itemId: 'TR-50X'\n          }\n        ]\n      }\n    ]\n  },\n  {\n    label: 'Website Design',\n    tasks: [\n      {\n        id: 'TR-40X',\n        start: 21,\n        duration: 9,\n        connections: [\n          {\n            itemId: 'MS-60X'\n          }\n        ]\n      }\n    ]\n  },\n  {\n    label: 'Database Setup',\n    tasks: [\n      {\n        id: 'TR-50X',\n        start: 24,\n        duration: 4,\n        connections: [\n          {\n            itemId: 'MS-60X'\n          }\n        ]\n      }\n    ]\n  },\n  {\n    label: '',\n    milestones: [\n      {\n        id: 'MS-60X',\n        label: 'Completed',\n        start: 35,\n        color: 'red'\n      }\n    ]\n  }\n];\n\nexport const schedulingEDFData: ITimelineChartRow[] = [\n  {\n    label: 'T1 (4, 1)',\n    tasks: [\n      {\n        start: 0,\n        duration: 1\n      },\n      {\n        start: 4,\n        duration: 1\n      },\n      {\n        start: 8,\n        duration: 1\n      },\n      {\n        start: 12,\n        duration: 1\n      }\n    ]\n  },\n  {\n    label: 'T2 (4, 2)',\n    tasks: [\n      {\n        start: 5,\n        duration: 2\n      },\n      {\n        start: 10,\n        duration: 2\n      }\n    ]\n  },\n  {\n    label: 'T3 (7, 2)',\n    tasks: [\n      {\n        start: 1,\n        duration: 2\n      },\n      {\n        start: 7,\n        duration: 1\n      },\n      {\n        start: 9,\n        duration: 1\n      }\n    ]\n  }\n];\n\nexport const inventionDataset: ITimelineChartRow[] = [\n  {\n    label: 'Inventions'\n  }\n];\n\nexport const illegalConnDataset: ITimelineChartRow[] = [\n  {\n    label: 'row1',\n    tasks: [\n      {\n        start: 0,\n        duration: 5,\n        connections: [\n          {\n            itemId: 'id2'\n          }\n        ]\n      }\n    ]\n  },\n  {\n    label: 'row2',\n    tasks: [\n      {\n        id: 'id2',\n        start: 5,\n        duration: 5\n      }\n    ]\n  }\n];\n\nexport const illegalConnDataset2: ITimelineChartRow[] = [\n  {\n    label: 'row1',\n    milestones: [\n      {\n        start: 2,\n        connections: [\n          {\n            itemId: 'id2'\n          }\n        ]\n      }\n    ]\n  },\n  {\n    label: 'row2',\n    tasks: [\n      {\n        id: 'id2',\n        start: 5,\n        duration: 5\n      }\n    ]\n  }\n];\n","import { ThemingParameters } from '@ui5/webcomponents-react-base';\nimport React, { CSSProperties, useContext, useEffect, useLayoutEffect, useRef, useState } from 'react';\nimport { TimelineChartBodyCtx } from '../util/context';\n\ninterface TimingFigureProps {\n  arrival: number;\n  period: number;\n  deadline?: number;\n  totalDuration: number;\n}\n\n// A custom figure for testing out the TimelineChartAnnotation.\nexport const TimingFigure = ({ arrival, period, deadline, totalDuration }: TimingFigureProps) => {\n  const ref = useRef<HTMLCanvasElement>();\n  const verticalSpacing = 2;\n  const halfArrowWidth = 4;\n  const chartBodyCtx = useContext(TimelineChartBodyCtx);\n\n  useEffect(() => {\n    const canvas = ref.current;\n    const ctx = canvas.getContext('2d');\n\n    // Set the canvas dimensions to avoid blurring\n    canvas.width = canvas.getBoundingClientRect().width;\n    canvas.height = canvas.getBoundingClientRect().height;\n\n    const width = canvas.width;\n    const height = canvas.height;\n    const one5thHeight = height / 5;\n    const four5thHeight = 4 * one5thHeight;\n\n    const interval = (period / totalDuration) * width;\n    const arrivalOffset = (arrival / totalDuration) * width;\n    const deadlineOffset = (deadline / totalDuration) * width;\n\n    ctx.beginPath();\n    ctx.lineWidth = 1;\n    ctx.strokeStyle = getComputedStyle(document.documentElement).getPropertyValue('--sapTextColor');\n\n    // Draw the up-pointing arrows for the arrival\n    for (let i = 0; i * interval + arrivalOffset < width; i++) {\n      const offset = i * interval + arrivalOffset;\n      ctx.moveTo(offset, verticalSpacing);\n      ctx.lineTo(offset, height - verticalSpacing);\n      ctx.moveTo(offset, verticalSpacing);\n      ctx.lineTo(offset - halfArrowWidth, one5thHeight);\n      ctx.moveTo(offset, verticalSpacing);\n      ctx.lineTo(offset + halfArrowWidth, one5thHeight);\n    }\n\n    // Draw the down-pointing arrows for the deadline\n    for (let i = 0; i * interval + arrivalOffset + deadlineOffset < width; i++) {\n      const offset = i * interval + arrivalOffset + deadlineOffset;\n      ctx.moveTo(offset, verticalSpacing);\n      ctx.lineTo(offset, height - verticalSpacing);\n      ctx.lineTo(offset - halfArrowWidth, four5thHeight);\n      ctx.moveTo(offset, height - verticalSpacing);\n      ctx.lineTo(offset + halfArrowWidth, four5thHeight);\n    }\n\n    ctx.stroke();\n  });\n\n  return <canvas ref={ref} style={{ width: chartBodyCtx.chartBodyWidth, height: '100%' }}></canvas>;\n};\n\ninterface InventionProps {\n  name: string;\n  time: number;\n  totalDuration: number;\n  rowHeight: number;\n  color: CSSProperties['color'];\n}\nexport const Invention = ({ name, rowHeight, time, totalDuration, color }: InventionProps) => {\n  const three4thRowHeight = (3 * rowHeight) / 4;\n  const d = (5 / 8) * rowHeight;\n  const rLarge = three4thRowHeight / 2;\n  const a = (rLarge / d) ** 2;\n  const b = (rLarge / d ** 2) * (d ** 2 - rLarge ** 2) ** 0.5;\n  const x0 = 0;\n  const y0 = d;\n  const x1 = a * x0 - y0 * b;\n  const x2 = a * x0 + y0 * b;\n  const y1 = a * y0 + b * x0;\n  const y2 = a * y0 - b * x0;\n\n  const ref = useRef<HTMLDivElement>();\n  const [offset, setoffset] = useState(0);\n  const chartBodyDim = useContext(TimelineChartBodyCtx);\n\n  useLayoutEffect(() => {\n    const width = ref.current?.getBoundingClientRect().width;\n    const xOffset = (time / totalDuration) * width - rowHeight / 2;\n    setoffset(xOffset);\n  });\n\n  return (\n    <div ref={ref} style={{ width: chartBodyDim.chartBodyWidth, position: 'absolute', overflow: 'hidden' }}>\n      <svg width=\"100%\" transform={`translate(${offset}, 0)`} fill={color}>\n        <g style={{ pointerEvents: 'auto', cursor: 'pointer' }}>\n          <title>{INVENTION_DESCRIPTION_MAP[name]}</title>\n          <circle cx={rowHeight / 2} cy={rLarge} r={rLarge} />\n          <path\n            d={`M ${rowHeight / 2} ${rLarge}\n                l ${x1} ${y1} \n                L ${rowHeight / 2} ${rowHeight} \n                L ${rowHeight / 2 + x2} ${rLarge + y2} Z`}\n          />\n          <svg\n            x={rowHeight / 8 + 0.2 * rLarge}\n            y={0.2 * rLarge}\n            width={1.6 * rLarge}\n            height={1.6 * rLarge}\n            viewBox=\"0 0 200 200\"\n          >\n            <g>\n              <path id=\"path2460\" fill={ThemingParameters.sapTextColor} d={INVENTION_ICON_MAP[name]} />\n            </g>\n          </svg>\n        </g>\n      </svg>\n    </div>\n  );\n};\n\nconst INVENTION_ICON_MAP = {\n  internet:\n    'M 161.41392 18.218526 A 40.554569 106.40938 43.819423 0 0 125.10761 29.627649 A 72.587685 72.402985 0 0 0 102.12968 25.85837 A 72.587685 72.402985 0 0 0 29.541866 98.261186 A 72.587685 72.402985 0 0 0 33.896639 122.82196 A 40.554569 106.40938 43.819423 0 0 27.446387 176.74942 A 40.554569 106.40938 43.819423 0 0 81.636877 167.68847 A 72.587685 72.402985 0 0 0 102.12968 170.664 A 72.587685 72.402985 0 0 0 174.7175 98.261186 A 72.587685 72.402985 0 0 0 170.23457 73.334542 A 40.554569 106.40938 43.819423 0 0 174.74902 23.147424 A 40.554569 106.40938 43.819423 0 0 161.41392 18.218526 z M 154.00662 33.132345 A 28.606757 88.443455 43.813538 0 1 162.31412 36.114075 A 28.606757 88.443455 43.813538 0 1 163.07118 59.009835 A 72.587685 72.402985 0 0 0 139.57339 36.279439 A 28.606757 88.443455 43.813538 0 1 154.00662 33.132345 z M 79.134705 44.613298 A 35.924975 68.708986 0 0 0 69.664998 68.009285 L 52.145654 68.009285 A 58.514561 58.365673 0 0 1 79.134705 44.613298 z M 125.12466 44.613298 A 58.514561 58.365673 0 0 1 152.11475 68.009285 L 134.59437 68.009285 A 35.924975 68.708986 0 0 0 125.12466 44.613298 z M 111.37718 52.693424 A 25.12785 48.058742 0 0 1 122.01322 68.009285 L 92.88632 68.009285 A 28.606757 88.443455 43.813538 0 1 111.37718 52.693424 z M 46.630745 79.829753 L 64.518542 79.829753 A 40.554569 106.40938 43.819423 0 0 54.04373 92.350952 L 43.951839 92.350952 A 58.514561 58.365673 0 0 1 46.630745 79.829753 z M 80.764579 79.829753 L 125.51534 79.829753 A 25.12785 48.058742 0 0 1 127.1049 92.350952 L 77.154464 92.350952 A 25.12785 48.058742 0 0 1 78.274809 82.469902 A 28.606757 88.443455 43.813538 0 1 80.412663 80.188387 A 28.606757 88.443455 43.813538 0 1 80.764579 79.829753 z M 136.85366 79.829753 L 152.9426 79.829753 A 28.606757 88.443455 43.813538 0 1 144.65215 92.350952 L 137.95489 92.350952 A 35.924975 68.708986 0 0 0 136.85366 79.829753 z M 160.10651 90.894194 A 58.514561 58.365673 0 0 1 160.30804 92.350952 L 159.13292 92.350952 A 40.554569 106.40938 43.819423 0 0 160.10651 90.894194 z M 43.951839 104.17142 L 45.339351 104.17142 A 40.554569 106.40938 43.819423 0 0 44.188 105.87829 A 58.514561 58.365673 0 0 1 43.951839 104.17142 z M 60.010291 104.17142 L 66.403699 104.17142 A 35.924975 68.708986 0 0 0 67.760205 117.22179 L 50.998437 117.22179 A 28.606757 88.443455 43.813538 0 1 60.010291 104.17142 z M 77.268669 104.17142 L 126.9907 104.17142 A 25.12785 48.058742 0 0 1 125.23577 116.02341 A 28.606757 88.443455 43.813538 0 1 124.11284 117.22179 L 79.274231 117.22179 A 25.12785 48.058742 0 0 1 77.268669 104.17142 z M 150.73188 104.17142 L 160.30804 104.17142 A 58.514561 58.365673 0 0 1 157.47049 117.22179 L 140.18731 117.22179 A 40.554569 106.40938 43.819423 0 0 150.73188 104.17142 z M 52.461397 129.04225 L 70.259794 129.04225 A 35.924975 68.708986 0 0 0 80.776982 152.54831 A 58.514561 58.365673 0 0 1 52.461397 129.04225 z M 83.260551 129.04225 L 112.38384 129.04225 A 28.606757 88.443455 43.813538 0 1 95.493396 143.65066 A 25.12785 48.058742 0 0 1 83.260551 129.04225 z M 133.99957 129.04225 L 151.79849 129.04225 A 58.514561 58.365673 0 0 1 123.48239 152.54883 A 35.924975 68.708986 0 0 0 133.99957 129.04225 z M 40.69364 136.72757 A 72.587685 72.402985 0 0 0 67.204167 161.68522 A 28.606757 88.443455 43.813538 0 1 39.881803 163.78225 A 28.606757 88.443455 43.813538 0 1 40.69364 136.72757 z ',\n  telephone:\n    'M 46.175476 35.462435 L 25.119397 56.518514 L 38.787297 78.123914 L 58.412972 61.659802 L 53.194169 52.941471 C 85.244125 52.941471 117.83024 52.43287 148.68446 52.820032 L 145.36012 61.316154 L 163.09134 77.939429 L 179.16064 60.951318 L 155.14919 37.309867 L 46.175476 35.462435 z M 70.925387 60.492432 L 58.824833 83.395426 L 43.634029 83.395426 L 28.443225 106.14959 L 28.443225 166.1418 L 172.73106 166.1418 L 172.73106 106.47774 L 159.50034 84.781905 L 142.56546 84.781905 L 132.24619 60.492432 L 70.925387 60.492432 z M 100.66207 87.548661 A 31.21455 31.21455 0 0 1 131.8767 118.76329 A 31.21455 31.21455 0 0 1 100.66207 149.97741 A 31.21455 31.21455 0 0 1 69.447957 118.76329 A 31.21455 31.21455 0 0 1 100.66207 87.548661 z M 100.47759 93.089408 A 4.4328356 4.4328356 0 0 0 96.044784 97.522213 A 4.4328356 4.4328356 0 0 0 100.47759 101.95502 A 4.4328356 4.4328356 0 0 0 104.91039 97.522213 A 4.4328356 4.4328356 0 0 0 100.47759 93.089408 z M 85.332259 100.1081 A 4.4328356 4.4328356 0 0 0 80.899455 104.54091 A 4.4328356 4.4328356 0 0 0 85.332259 108.97371 A 4.4328356 4.4328356 0 0 0 89.765063 104.54091 A 4.4328356 4.4328356 0 0 0 85.332259 100.1081 z M 117.47035 100.1081 A 4.4328356 4.4328356 0 0 0 113.03754 104.54091 A 4.4328356 4.4328356 0 0 0 117.47035 108.97371 A 4.4328356 4.4328356 0 0 0 121.90315 104.54091 A 4.4328356 4.4328356 0 0 0 117.47035 100.1081 z M 100.66207 105.46436 A 13.298506 13.298506 0 0 0 87.36366 118.76329 A 13.298506 13.298506 0 0 0 100.66207 132.06171 A 13.298506 13.298506 0 0 0 113.961 118.76329 A 13.298506 13.298506 0 0 0 100.66207 105.46436 z M 78.683053 115.62292 A 4.4328356 4.4328356 0 0 0 74.250248 120.05572 A 4.4328356 4.4328356 0 0 0 78.683053 124.48904 A 4.4328356 4.4328356 0 0 0 83.115857 120.05572 A 4.4328356 4.4328356 0 0 0 78.683053 115.62292 z M 121.90315 115.62292 A 4.4328356 4.4328356 0 0 0 117.47035 120.05572 A 4.4328356 4.4328356 0 0 0 121.90315 124.48904 A 4.4328356 4.4328356 0 0 0 126.33596 120.05572 A 4.4328356 4.4328356 0 0 0 121.90315 115.62292 z M 85.332259 131.50722 A 4.4328356 4.4328356 0 0 0 80.899455 135.94054 A 4.4328356 4.4328356 0 0 0 85.332259 140.37334 A 4.4328356 4.4328356 0 0 0 89.765063 135.94054 A 4.4328356 4.4328356 0 0 0 85.332259 131.50722 z M 115.25395 131.50722 A 4.4328356 4.4328356 0 0 0 110.82114 135.94054 A 4.4328356 4.4328356 0 0 0 115.25395 140.37334 A 4.4328356 4.4328356 0 0 0 119.68675 135.94054 A 4.4328356 4.4328356 0 0 0 115.25395 131.50722 z M 100.47759 137.04848 A 4.4328356 4.4328356 0 0 0 96.044784 141.48129 A 4.4328356 4.4328356 0 0 0 100.47759 145.91409 A 4.4328356 4.4328356 0 0 0 104.91039 141.48129 A 4.4328356 4.4328356 0 0 0 100.47759 137.04848 z ',\n  airplane:\n    'm 57.851272,54.964685 a 3.6940298,3.6940298 0 0 0 -0.73593,4.167108 l -0.534591,0.534591 1.298293,1.298293 A 2.7705224,18.839552 45 0 0 45.087586,71.68208 2.7705224,18.839552 45 0 0 33.724873,86.962694 2.7705224,18.839552 45 0 0 49.005487,75.599981 2.7705224,18.839552 45 0 0 59.721429,62.807062 l 2.150789,2.150789 -3.717657,3.582456 3.396098,11.754429 6.135924,6.135924 -42.818093,42.6047 10.687806,10.6878 52.457544,-27.98766 c 1.192399,-1.1924 2.084334,-2.09245 3.063211,-3.0771 l 48.618209,37.33589 -0.56273,0.56273 -12.56235,21.75819 7.44482,7.96662 13.19084,-13.19085 5.48513,-3.7e-4 13.84383,-13.84383 1.04507,-5.7464 9.78196,-9.78196 -8.67478,-8.67478 -18.51118,10.68781 -37.9662,-48.701889 c 0.88585,-0.890412 1.6543,-1.666732 2.70876,-2.721191 L 139.99744,35.28201 129.5709,24.855471 90.206647,64.023141 84.275717,58.092211 72.52129,54.69611 67.724952,59.317784 65.677573,57.270406 A 2.7705224,18.100746 45 0 0 76.954414,47.651054 2.7705224,18.100746 45 0 0 87.794959,32.892608 2.7705224,18.100746 45 0 0 73.036514,43.733153 2.7705224,18.100746 45 0 0 63.417162,55.009994 l -1.090011,-1.09001 -0.307309,0.307308 a 3.6940298,3.6940298 0 0 0 -4.16857,0.737393 z',\n  compass:\n    'M 101.26077,12.107262 A 90.873099,88.458598 0 0 0 10.387472,100.5658 90.873099,88.458598 0 0 0 101.26077,189.02443 90.873099,88.458598 0 0 0 192.13413,100.5658 90.873099,88.458598 0 0 0 101.26077,12.107262 Z m 0,19.974431 A 69.581566,68.484065 0 0 1 170.84241,100.5658 69.581566,68.484065 0 0 1 101.26077,169.05001 69.581566,68.484065 0 0 1 31.6792,100.5658 69.581566,68.484065 0 0 1 101.26077,32.081693 Z M 91.677413,45.85407 v 19.507693 h 4.611461 V 51.971987 l 8.280186,13.389776 h 4.84728 V 45.85407 h -4.61146 V 57.029309 L 97.690905,45.85407 Z M 148.79838,64.412939 105.83415,88.03466 a 13.170012,13.170013 51.481764 0 0 -2.15864,-0.17871 13.170012,13.170013 51.481764 0 0 -12.952448,10.833109 l -37.138622,40.311791 47.3705,-25.09563 a 13.170012,13.170013 51.481764 0 0 2.72057,0.29049 13.170012,13.170013 51.481764 0 0 13.16992,-13.16993 13.170012,13.170013 51.481764 0 0 -0.0258,-0.80326 z M 44.835611,91.509998 50.089453,111.0176 h 5.568276 l 3.405938,-12.708058 3.498059,12.708058 h 5.568275 L 73.383844,91.509998 H 68.260811 L 65.116489,104.93838 61.697037,91.509998 H 56.679633 L 53.089454,104.93838 50.089453,91.509998 Z m 89.424569,0.439094 V 111.4567 h 14.11015 v -3.77319 h -9.10502 v -4.82149 h 8.45035 v -3.773164 h -8.45035 v -3.366601 h 9.10502 V 91.949092 Z M 90.717535,103.33367 a 13.170012,13.170013 51.481764 0 0 6.364773,9.09273 l -29.450364,15.00432 z m 11.375985,32.16114 c -2.559117,0 -4.655315,0.57646 -6.288576,1.72937 -1.62456,1.14418 -2.436842,2.62464 -2.436843,4.44135 2e-6,1.35381 0.357905,2.48947 1.074103,3.40656 0.724934,0.90835 1.908827,1.62893 3.550848,2.16171 0.716167,0.23583 1.480201,0.43236 2.292478,0.58957 0.82102,0.14848 1.59816,0.30986 2.33184,0.48454 0.69873,0.16595 1.22758,0.40657 1.58567,0.72097 0.36684,0.30572 0.55025,0.67256 0.55025,1.10054 0,0.46291 -0.12685,0.81187 -0.38013,1.04769 -0.24457,0.23581 -0.559,0.43235 -0.94331,0.58956 -0.31442,0.12227 -0.72057,0.20983 -1.21843,0.26223 -0.49785,0.0525 -0.89982,0.0786 -1.20551,0.0786 -1.187857,0 -2.427681,-0.22272 -3.720322,-0.66816 -1.283914,-0.44545 -2.445776,-1.08326 -3.485144,-1.913 h -0.550256 v 4.67718 c 1.048103,0.4367 2.170657,0.79939 3.367233,1.08762 1.205294,0.2795 2.615455,0.41944 4.231269,0.41944 2.79494,0 5.00493,-0.5985 6.62948,-1.79508 1.63331,-1.20533 2.44975,-2.76856 2.44974,-4.69008 0,-1.34507 -0.3579,-2.43725 -1.07411,-3.27575 -0.70746,-0.84721 -1.80797,-1.51539 -3.30152,-2.0045 -0.75989,-0.24456 -1.47152,-0.4363 -2.13532,-0.57605 -0.65506,-0.13976 -1.34112,-0.28386 -2.05732,-0.43234 -1.09177,-0.2271 -1.833757,-0.47602 -2.226804,-0.74678 -0.393017,-0.27949 -0.589527,-0.67733 -0.589547,-1.19264 0,-0.34062 0.12207,-0.64196 0.36663,-0.90398 0.244557,-0.27076 0.536937,-0.47145 0.877574,-0.60247 0.384287,-0.15722 0.782117,-0.26202 1.192607,-0.31443 0.41926,-0.0611 0.8385,-0.0915 1.25773,-0.0915 1.18786,0 2.3491,0.21378 3.48455,0.64175 1.14418,0.41924 2.10954,0.9433 2.89561,1.57216 h 0.53736 v -4.49355 c -0.91709,-0.37557 -2.0045,-0.68586 -3.26224,-0.9304 -1.24898,-0.25329 -2.51567,-0.38014 -3.79959,-0.38014 z',\n  penicillin:\n    'm 129.65565,28.653548 a 31.953358,31.953358 0 0 0 -23.19186,9.988021 l -0.13126,-0.119889 -35.142043,42.734342 0.184485,0.168465 -35.109485,42.694033 0.198954,0.1819 a 31.953358,31.953358 0 0 0 -7.890475,20.99045 31.953358,31.953358 0 0 0 31.953606,31.95309 31.953358,31.953358 0 0 0 23.08903,-9.88518 l 0.01602,0.0145 0.141077,-0.17157 a 31.953358,31.953358 0 0 0 2.617928,-3.18327 l 32.383033,-39.37951 -0.18397,-0.16794 35.10897,-42.694556 -0.0754,-0.06873 A 31.953358,31.953358 0 0 0 161.60931,60.607183 31.953358,31.953358 0 0 0 129.6557,28.653578 Z m -3.33209,11.969812 c 7.48637,-0.110785 14.04978,7.399032 14.04978,7.399032 0,0 -9.26997,-0.742726 -12.92944,0.738973 -3.65947,1.481698 -7.26791,4.20726 -10.34304,7.018693 -5.16648,4.723464 -13.29841,16.253271 -13.29841,16.253271 l -8.127153,-5.910233 c 0,0 12.764583,-17.217063 16.623273,-20.317106 3.8587,-3.100044 6.03437,-4.809594 13.6679,-5.171778 0.11928,-0.0057 0.23825,-0.0091 0.35709,-0.01085 z m -55.464319,53.85046 35.146179,32.58612 -24.027995,29.66744 a 23.709179,24.072694 0 0 1 -1.942517,2.39831 l -0.104903,0.12919 -0.01189,-0.0109 a 23.709179,24.072694 0 0 1 -17.131771,7.44709 23.709179,24.072694 0 0 1 -23.709147,-24.07244 23.709179,24.072694 0 0 1 5.854423,-15.8135 l -0.147794,-0.13746 z',\n  lightbulb:\n    'M 99.913281,22.533508 A 49.6847,49.6847 0 0 0 50.228459,72.218331 49.6847,49.6847 0 0 0 65.020837,107.54176 l 5.744869,32.6719 h 57.995944 l 6.56601,-33.19384 A 49.6847,49.6847 0 0 0 149.5981,72.218331 49.6847,49.6847 0 0 0 99.913281,22.533508 Z M 119.0718,37.481433 a 11.820897,6.0951495 49.283497 0 1 9.85211,5.826001 11.820897,6.0951495 49.283497 0 1 3.09129,12.935645 11.820897,6.0951495 49.283497 0 1 -12.33103,-4.983676 11.820897,6.0951495 49.283497 0 1 -3.09129,-12.935644 11.820897,6.0951495 49.283497 0 1 2.47892,-0.842326 z m -9.00978,40.46213 c 1.96961,0.03192 3.73262,1.592192 5.25239,2.638598 0.82538,0.781452 1.35128,1.417537 1.32498,2.615861 -0.007,1.076165 -0.0139,2.157743 -0.16588,3.225127 -0.21848,1.001055 -0.60647,1.934215 -0.971,2.888195 -0.42483,1.153782 -0.80205,2.35407 -1.45572,3.40031 -0.0727,0.104161 -0.14517,0.208602 -0.21808,0.312642 0.41913,0.208548 0.83909,0.415704 1.25987,0.621668 0.86882,0.481235 1.80741,0.684281 2.77968,0.793233 l 2.52181,-10.584884 h 4.32015 l -2.44947,10.282577 c 0.63476,-0.24944 1.23875,-0.590268 1.86811,-0.855245 0.17183,-0.06132 0.3434,-0.122649 0.51521,-0.183968 l 5.83375,2.201416 c -0.16869,0.05389 -2.92311,0.107857 -3.0918,0.161747 -1.02938,0.404914 -1.95817,1.052954 -3.05976,1.25367 -0.90132,0.115815 -1.79904,0.149578 -2.70423,0.102319 l -9.58442,40.231651 h -4.32015 l 9.8273,-41.25071 c -0.85505,-0.416315 -1.71183,-0.827998 -2.53886,-1.300696 -0.53791,-0.279802 -1.07688,-0.560802 -1.61385,-0.846976 -0.44035,0.63133 -0.8764,1.265339 -1.28365,1.918746 -0.84639,0.995281 -1.72191,1.088654 -2.97966,1.201477 -0.94084,0.0927 -1.88508,0.0617 -2.8298,0.0708 -0.88809,0.0047 -1.77652,0.02017 -2.66444,-0.0036 -1.1838,-0.051 -2.3688,-0.161256 -3.49333,-0.56379 -1.535255,-0.567317 -2.997338,-1.328005 -4.398177,-2.189014 -0.223982,0.153069 -0.45474,0.296923 -0.694531,0.425814 -0.294399,0.161541 -0.601417,0.299548 -0.895036,0.462504 -0.664872,0.369009 -1.253407,0.877197 -1.982825,1.12913 -0.955742,0.347329 -1.916738,0.485723 -2.930053,0.544153 -1.007509,0.132514 -2.008132,0.246869 -3.026689,0.155029 -0.988727,-0.04748 -1.981988,-0.103643 -2.955375,-0.294038 -0.523409,-0.09139 -1.056131,-0.121893 -1.58595,-0.1757 L 91.372717,137.0485 H 87.052568 L 77.214925,95.755396 c -0.105501,-0.0082 -0.210647,-0.01742 -0.31626,-0.02532 l -6.5257,-2.325439 c 1.074329,0.08666 4.603839,0.164529 6.356718,0.313159 l -2.349727,-9.863481 h 4.32015 l 2.491321,10.457243 c 0.615627,0.07629 1.234097,0.12776 1.85415,0.162264 1.00047,0.08477 1.991154,0.03116 2.983797,-0.09767 0.984188,-0.09805 1.948237,-0.176862 2.895431,-0.473873 0.998074,-0.407095 1.888067,-1.023376 2.831351,-1.540475 0.293414,-0.152584 0.573849,-0.326624 0.843877,-0.515731 -0.809468,-0.910849 -1.505455,-1.920986 -2.068091,-3.003434 -0.649051,-1.389314 -1.200667,-2.8358 -1.385445,-4.368725 -0.05715,-1.142062 4.12e-4,-2.313205 0.333313,-3.413229 0.475671,-1.143188 1.075267,-1.809652 2.402954,-1.579748 2.587991,0.421062 4.872386,1.897793 6.90087,3.516064 0.922812,0.952297 1.465126,1.805518 1.517216,3.167249 -0.017,1.188951 -0.333173,2.314578 -0.869193,3.378605 -0.590447,1.127729 -1.248209,2.236693 -2.089795,3.197221 -0.295953,0.291467 -0.603391,0.572962 -0.925008,0.837158 0.01195,0.01149 0.02313,0.02371 0.03514,0.03514 0.20695,0.09077 0.418344,0.171343 0.627352,0.257348 1.084439,0.425956 2.232282,0.574218 3.386354,0.640788 0.88119,0.03458 1.76371,0.02417 2.64532,0.01757 0.94473,-0.01487 1.88919,0.01307 2.8329,-0.03514 1.09571,-0.09407 2.01867,-0.112788 2.79673,-0.958598 0.40134,-0.631336 0.83206,-1.242788 1.26452,-1.853116 -0.54021,-0.353386 -1.06827,-0.724501 -1.57923,-1.119829 -0.69246,-0.566678 -1.36958,-1.168822 -1.84743,-1.935282 -0.56636,-1.048396 -0.79353,-2.224012 -0.78083,-3.413745 0.0727,-1.28305 0.20486,-2.566875 0.6134,-3.793567 0.31659,-0.951849 0.72545,-1.807139 1.39371,-2.566768 0.57221,-0.425554 1.10823,-0.859433 1.86035,-0.894003 0.13313,-0.01206 0.26557,-0.0166 0.39688,-0.01447 z m 2.76417,2.33009 c -0.66376,-0.0039 -1.16832,0.307716 -1.68,0.692464 -0.64807,0.673791 -1.00502,1.473898 -1.30793,2.34301 -0.39475,1.194589 -0.50328,2.447887 -0.56948,3.695898 0.0207,1.147245 0.26696,2.25537 0.90382,3.214274 0.14407,0.197825 0.30284,0.381603 0.47026,0.556555 0.0111,-0.01595 0.0225,-0.03158 0.0336,-0.04754 0.62564,-1.025642 0.98827,-2.192926 1.40611,-3.315043 0.34955,-0.941695 0.72691,-1.859727 0.91881,-2.849438 0.14421,-1.042976 0.13666,-2.098567 0.14366,-3.149162 -0.007,-0.460495 -0.12616,-0.824766 -0.31884,-1.141016 z m -18.407664,1.493966 c -0.762103,-0.02286 -1.156951,0.332985 -1.511535,1.211295 -0.287665,1.053071 -0.345585,2.167484 -0.256316,3.251998 0.203007,1.489733 0.758513,2.885137 1.425753,4.220931 0.01541,0.02648 0.03151,0.05262 0.04703,0.07906 0.76664,-0.882211 1.383587,-1.890176 1.923913,-2.923336 0.492193,-1.015423 0.778405,-2.094603 0.762744,-3.222025 -0.09242,-1.065608 -0.509869,-1.72523 -1.153417,-2.40037 -0.187061,-0.04823 -0.360821,-0.08168 -0.648023,-0.143144 -0.219041,-0.04385 -0.414275,-0.06914 -0.590145,-0.07441 z M 113.745,93.144185 c -8.6e-4,0.0012 -0.002,0.0024 -0.003,0.0036 0.18786,0.107593 0.46531,0.267891 0.34985,0.199471 -0.13881,-0.08226 -0.21765,-0.126689 -0.34726,-0.203089 z M 73.071509,141.34124 v 9.2351 h 53.194171 v -9.2351 z m 0,10.05417 v 9.2351 h 15.490527 a 12.374999,12.374999 0 0 0 12.210104,10.40298 12.374999,12.374999 0 0 0 12.21011,-10.40298 h 13.28343 v -9.2351 z',\n  steamengine:\n    'M 57.916878 19.43809 A 8.4962683 8.4962683 0 0 0 49.420756 27.934212 A 8.4962683 8.4962683 0 0 0 54.701571 35.794198 L 44.749207 109.88425 A 32.177363 32.322633 20.617892 0 0 29.197701 127.31006 A 32.177363 32.322633 20.617892 0 0 27.976587 146.10839 L 23.12262 146.10839 L 23.12262 153.71775 L 19.94762 153.71775 L 19.94762 178.00619 L 176.57475 178.00619 L 176.57475 153.71775 L 173.839 153.71775 L 173.839 146.10839 L 167.23992 146.10839 L 167.23992 133.40374 L 173.61938 132.98516 L 173.61938 128.92185 L 167.23992 129.33991 L 167.23992 124.12937 L 171.51305 124.12937 L 171.51305 117.84965 L 160.32096 117.84965 L 160.32096 87.110962 A 8.4962683 8.4962683 0 0 0 168.04814 78.65308 A 8.4962683 8.4962683 0 0 0 159.55202 70.156958 A 8.4962683 8.4962683 0 0 0 154.47222 71.849878 L 116.60115 46.394584 L 66.332902 28.748633 A 8.4962683 8.4962683 0 0 0 66.413 27.934212 A 8.4962683 8.4962683 0 0 0 57.916878 19.43809 z M 62.524349 35.058325 L 103.85309 63.11346 L 103.79728 102.3245 L 101.38606 102.3245 L 101.38606 106.38782 L 103.7916 106.38782 L 103.77558 117.78041 L 101.38606 117.78041 L 101.38606 123.32115 L 103.36423 123.32115 L 98.434819 133.85178 L 91.212004 134.32513 A 32.177363 32.322633 20.617892 0 0 70.69646 108.38822 A 32.177363 32.322633 20.617892 0 0 49.056954 108.06317 L 58.689441 36.35437 A 8.4962683 8.4962683 0 0 0 62.524349 35.058325 z M 113.15123 66.962321 L 151.14478 79.869543 A 8.4962683 8.4962683 0 0 0 157.36559 86.857231 L 157.36559 117.84965 L 144.9157 117.84965 L 144.9157 124.12937 L 149.50819 124.12937 L 149.50819 130.50263 L 119.36274 132.47925 L 115.3759 123.32115 L 118.00933 123.32115 L 118.00933 117.78041 L 114.97903 117.78041 L 114.56923 106.38782 L 116.53191 106.38782 L 116.53191 102.3245 L 114.42299 102.3245 L 113.15123 66.962321 z M 58.635697 112.54972 A 26.538805 26.054457 20.617892 0 1 67.459965 113.91449 L 60.13328 130.16001 A 8.4954249 8.5337788 20.617892 0 0 58.388684 130.18327 L 49.887911 114.146 A 26.538805 26.054457 20.617892 0 1 58.635697 112.54972 z M 70.047404 114.89945 A 26.538805 26.054457 20.617892 0 1 82.756706 126.78141 L 65.860579 133.21202 A 8.4954249 8.5337788 20.617892 0 0 64.792428 132.12992 L 70.047404 114.89945 z M 47.909737 116.60115 L 52.116715 127.80357 L 47.894234 122.81007 A 3.3246269 3.3246269 0 0 0 48.391878 121.06444 A 3.3246269 3.3246269 0 0 0 47.599679 118.91109 L 47.909737 116.60115 z M 43.746684 117.34839 L 43.682088 117.82847 L 43.460396 117.56595 A 26.538805 26.054457 20.617892 0 1 43.746684 117.34839 z M 43.429907 117.5892 L 43.429907 118.17212 A 3.3246269 3.3246269 0 0 0 41.742672 121.06444 A 3.3246269 3.3246269 0 0 0 45.067017 124.38931 A 3.3246269 3.3246269 0 0 0 45.745011 124.31748 L 53.033455 132.93711 A 8.4954249 8.5337788 20.617892 0 0 52.514624 133.54689 L 34.942053 128.19838 A 26.538805 26.054457 20.617892 0 1 43.429907 117.5892 z M 83.920976 129.29237 A 26.538805 26.054457 20.617892 0 1 85.427861 134.70444 L 72.201278 135.57209 L 83.920976 129.29237 z M 34.00826 130.71554 L 50.837207 138.31714 A 8.4954249 8.5337788 20.617892 0 0 50.94366 140.02866 L 39.597066 146.10839 L 34.066138 146.10839 A 26.538805 26.054457 20.617892 0 1 34.00826 130.71554 z M 59.17985 134.34115 A 4.285303 4.3046498 20.617892 0 1 60.829879 134.61142 A 4.285303 4.3046498 20.617892 0 1 62.841125 136.18549 L 61.269128 136.28884 A 2.9320495 3.096327 20.617892 0 0 60.404582 135.74262 A 2.9320495 3.096327 20.617892 0 0 58.760238 135.66149 L 57.874504 134.61349 A 4.285303 4.3046498 20.617892 0 1 59.17985 134.34115 z M 149.50819 134.56646 L 149.50819 146.10839 L 122.28298 146.10839 L 122.03493 138.61841 L 121.08253 136.43043 L 149.50819 134.56646 z M 55.801245 136.21132 L 56.723669 137.30221 A 2.9320495 3.096327 20.617892 0 0 56.57019 137.60814 A 2.9320495 3.096327 20.617892 0 0 58.223836 141.53865 A 2.9320495 3.096327 20.617892 0 0 61.722331 140.3227 L 63.295878 140.21935 A 4.285303 4.3046498 20.617892 0 1 57.798539 142.66933 A 4.285303 4.3046498 20.617892 0 1 55.303601 137.13168 A 4.285303 4.3046498 20.617892 0 1 55.801245 136.21132 z M 96.472148 138.04429 L 96.20343 138.61841 L 95.440169 145.91409 L 97.463302 146.10839 L 90.594987 146.10839 A 32.177363 32.322633 20.617892 0 0 91.501392 138.37037 L 96.472148 138.04429 z M 85.781844 138.74502 A 26.538805 26.054457 20.617892 0 1 84.7571 146.10839 L 82.971163 146.10839 L 69.092424 139.83953 L 85.781844 138.74502 z M 65.874532 144.01757 L 72.744397 146.10839 L 65.517965 146.10839 L 65.059078 144.88676 A 8.4954249 8.5337788 20.617892 0 0 65.874532 144.01757 z M 53.20037 144.57309 A 8.4954249 8.5337788 20.617892 0 0 54.323299 145.54719 L 54.15225 146.10839 L 49.166508 146.10839 L 53.20037 144.57309 z ',\n  printingpress:\n    'm 100.94009,22.911263 v 4.451925 l -1.660362,-0.766362 v 4.432805 l 1.660362,0.766361 v 2.459281 l -1.660362,0.638721 v 4.432805 0.698665 l 1.660362,0.766361 v 2.459282 l -1.660362,0.63872 v 4.432805 l 1.660362,-0.638721 v 0.855245 H 52.815381 V 34.354492 H 44.319259 V 110.45166 H 21.864815 v 17.73121 h 6.050277 v 54.49487 h 11.820467 v -54.49487 h 12.5212 v 30.48341 h 8.496122 V 128.18287 H 72.772302 V 110.45166 H 52.815381 V 55.926819 h 46.464347 v 2.619478 l 1.660362,0.766362 v 2.459281 l -1.660362,0.638721 v 4.432804 1.227832 l 1.660362,0.766362 v 2.459281 l -1.660362,0.638721 V 75.3184 h -8.765873 v 14.686442 h -7.9375 v 6.280237 h 41.003695 v -6.280237 h -5.7304 V 89.02609 h -6.65954 V 78.683053 h 6.65954 V 75.3184 h -10.62984 v -2.004012 l 1.6645,-0.640271 v -0.170015 -4.432805 l -1.6645,-0.767912 v -3.513997 l 1.6645,-0.640271 v -0.170015 -4.432805 l -1.6645,-0.768428 v -1.85105 h 41.34477 v 22.756234 h 8.49612 V 34.354492 h -8.49612 v 14.184664 h -41.34477 v -3.270601 l 1.6645,-0.640271 v -0.170016 -4.432804 l -1.6645,-0.768429 v -2.984314 l 1.6645,-0.640271 v -0.170015 -4.432804 l -1.6645,-0.768429 v -7.349939 z m 12.46642,58.037801 v 6.27972 h 69.44796 v -6.27972 z m 35.15807,8.077026 v 21.42557 H 131.8767 v 17.73121 h 8.22121 v 30.48341 h 8.49664 v -30.48341 h 12.14086 v 54.49487 h 11.82098 v -54.49487 h 7.41299 V 110.45166 H 157.0607 V 89.02609 Z M 76.945691,111.5596 v 55.41057 H 127.92346 V 111.5596 Z m 9.494511,5.57072 h 32.138088 v 3.69383 H 86.440202 Z m 0,8.46666 h 32.138088 v 3.69384 H 86.440202 Z m 0,7.40834 h 32.138088 v 3.69383 H 86.440202 Z m 0,7.40833 h 32.138088 v 3.69383 H 86.440202 Z',\n  wheel:\n    'M 98.630672 19.209163 A 79.052238 79.052238 0 0 0 19.578133 98.261186 A 79.052238 79.052238 0 0 0 98.630672 177.31321 A 79.052238 79.052238 0 0 0 177.68269 98.261186 A 79.052238 79.052238 0 0 0 98.630672 19.209163 z M 95.969853 34.646464 L 93.176742 78.142517 A 20.871267 20.871267 0 0 0 89.185771 79.699011 L 55.764038 50.309591 A 65.199623 63.722008 0 0 1 95.969853 34.646464 z M 102.77099 34.672302 A 65.199623 63.722008 0 0 1 142.274 50.925057 L 108.98611 80.196655 A 20.871267 20.871267 0 0 0 105.59407 78.639644 L 102.77099 34.672302 z M 50.905937 54.863835 L 80.334115 88.330009 A 20.871267 20.871267 0 0 0 78.587968 92.456889 L 33.554541 95.348185 A 65.199623 63.722008 0 0 1 50.905937 54.863835 z M 147.12384 55.669987 A 65.199623 63.722008 0 0 1 163.75228 95.256201 L 118.64857 92.360254 A 20.871267 20.871267 0 0 0 117.49309 89.366121 L 147.12384 55.669987 z M 98.630155 87.733146 A 10.527985 10.527985 0 0 1 109.15819 98.261186 A 10.527985 10.527985 0 0 1 98.630155 108.78923 A 10.527985 10.527985 0 0 1 88.102633 98.261186 A 10.527985 10.527985 0 0 1 98.630155 87.733146 z M 98.630155 90.688521 A 7.2033582 7.5727611 0 0 0 91.426978 98.261186 A 7.2033582 7.5727611 0 0 0 98.630155 105.83385 A 7.2033582 7.5727611 0 0 0 105.83385 98.261186 A 7.2033582 7.5727611 0 0 0 98.630155 90.688521 z M 33.585547 101.91471 L 78.858236 104.82203 A 20.871267 20.871267 0 0 0 80.583195 108.64815 L 51.255786 141.9996 A 65.199623 63.722008 0 0 1 33.585547 101.91471 z M 163.71559 102.00721 A 65.199623 63.722008 0 0 1 146.78794 141.20947 L 117.24401 107.61204 A 20.871267 20.871267 0 0 0 118.36642 104.91918 L 163.71559 102.00721 z M 108.4678 116.6089 L 141.85232 145.96525 A 65.199623 63.722008 0 0 1 102.81853 161.84645 L 105.64265 117.86464 A 20.871267 20.871267 0 0 0 108.4678 116.6089 z M 89.704602 117.10655 A 20.871267 20.871267 0 0 0 93.128682 118.369 L 95.92231 161.87384 A 65.199623 63.722008 0 0 1 56.197087 146.5709 L 89.704602 117.10655 z '\n};\n\nconst INVENTION_DESCRIPTION_MAP = {\n  internet: 'The internet was invented in the 1970s.',\n  telephone: 'The telephone was invented in 1876.',\n  airplane: 'The airplane was invented by the Wright brothers in 1903.',\n  compass: 'The compass was invented by the Chinese and adopted for navigation in the 11th century.',\n  penicillin: 'The penicillin was discovered in 1928 but isolated and manufactured in 1940.',\n  lightbulb: 'The practical incandescent bulb was invented by Edison and others around 1879.',\n  steamengine: 'The steam engine was invented by James Watson in 1764.',\n  printingpress: 'The Guttenburg press was invented in 1440.',\n  wheel: 'The wheel is thought to have been invented around 3500 B.C.'\n};\n","import { ArgsTable, Canvas, Markdown, Meta, Story } from '@storybook/addon-docs';\nimport { DocsHeader, Footer } from '@sb/components';\nimport { TimelineChart } from './TimelineChart';\nimport { TimelineChartAnnotation } from './TimelineChartAnnotation';\nimport { dummyDataSet, dummyDiscreteDataSet, schedulingEDFData, inventionDataset } from './examples/Dataset.ts';\nimport { TimingFigure, Invention } from './examples/Annotations.tsx';\nimport SubcomponentsSection from '@sb/docs/SubcomponentsSection.md?raw';\nimport { ThemingParameters } from '@ui5/webcomponents-react-base';\n\n<Meta\n  title=\"TimelineChart\"\n  component={TimelineChart}\n  subcomponents={{ TimelineChartAnnotation }}\n  argTypes={{\n    dataset: {\n      control: { disable: true }\n    }\n  }}\n/>\n\n<DocsHeader />\n\n## Example\n\n<Canvas withToolbar>\n  <Story\n    name=\"Default\"\n    args={{\n      dataset: dummyDiscreteDataSet,\n      totalDuration: 36,\n      isDiscrete: true,\n      start: 1,\n      showConnection: true\n    }}\n  >\n    {(props) => {\n      return <TimelineChart {...props} />;\n    }}\n  </Story>\n</Canvas>\n\n## Properties\n\n<ArgsTable story=\"Default\" />\n\n<br />\n<br />\n\n## More Examples\n\n### With Annotations\n\nThis example shows how the `TimelineChart` is used to visualize a simple simulation of the\n[<b>Earliest Deadline First</b>](https://en.wikipedia.org/wiki/Earliest_deadline_first_scheduling) scheduling\nalgorithm. The tasks are shown in the chart and the annotations are added on top and used to indicate the\narrival time, period and deadline of the tasks. The `TimelineChartAnnotation` component provides a way to specify the row\nthe annotations are applied to. For the annotations to scale well with the scaling of the width of the timeline, when\nzooming is done, a **ResizeObserver** could be used if desired. But for most purposes, the `TimelineChartBodyCtx` provided\nshould suffice. Using the React `useContext` hook to get the context and the _chartBodyWidth_ property should help with\nthe scaling. This will prevent having to create too many ResizeObservers and affecting performance.\n\nThe annotations are drawn using the HTML canvas and all the annotations for the same row are drawn at the same time using\nthe `TimingFigure` custom component created for this specific example. As can be seen, the annotations scale neatly without\nblurring when the timeline is zoomed. A valueFormat `(x) => Number.parseFloat(x).toFixed(2)` has also been applied to the\nticks and tooltip numbers.\n\n<Canvas>\n  <Story\n    name=\"With Annotations\"\n    args={{\n      dataset: schedulingEDFData,\n      totalDuration: 15,\n      showConnection: true,\n      showAnnotation: true,\n      rowHeight: 35,\n      unit: 'ms',\n      valueFormat: (x) => Number.parseFloat(x).toFixed(2)\n    }}\n  >\n    {(props) => (\n      <TimelineChart\n        {...props}\n        annotations={\n          <>\n            <TimelineChartAnnotation\n              rowIndex={0}\n              rowHeight={35}\n              figure={<TimingFigure arrival={0} period={4} deadline={4} totalDuration={15} />}\n            />\n            <TimelineChartAnnotation\n              rowIndex={1}\n              rowHeight={35}\n              figure={<TimingFigure arrival={4} period={5} deadline={5} totalDuration={15} />}\n            />\n            <TimelineChartAnnotation\n              rowIndex={2}\n              rowHeight={35}\n              figure={<TimingFigure arrival={0} period={7} deadline={6} totalDuration={15} />}\n            />\n          </>\n        }\n      />\n    )}\n  </Story>\n</Canvas>\n\n#### TimingFigure Code\n\n<details>\n\n<summary>Show Code</summary>\n\n```jsx\nexport const TimingFigure = ({ arrival, period, deadline, totalDuration }) => {\n  const ref = useRef();\n  const verticalSpacing = 2;\n  const halfArrowWidth = 4;\n  const chartBodyCtx = useContext(TimelineChartBodyCtx);\n\n  useEffect(() => {\n    const canvas = ref.current;\n    const ctx = canvas.getContext('2d');\n\n    // Set the canvas dimensions to avoid blurring\n    canvas.width = canvas.getBoundingClientRect().width;\n    canvas.height = canvas.getBoundingClientRect().height;\n\n    const width = canvas.width;\n    const height = canvas.height;\n    const one5thHeight = height / 5;\n    const four5thHeight = 4 * one5thHeight;\n\n    const interval = (period / totalDuration) * width;\n    const arrivalOffset = (arrival / totalDuration) * width;\n    const deadlineOffset = (deadline / totalDuration) * width;\n\n    ctx.beginPath();\n    ctx.lineWidth = 1;\n    ctx.strokeStyle = getComputedStyle(document.documentElement).getPropertyValue('--sapTextColor');\n\n    // Draw the up-pointing arrows for the arrival\n    for (let i = 0; i * interval + arrivalOffset < width; i++) {\n      const offset = i * interval + arrivalOffset;\n      ctx.moveTo(offset, verticalSpacing);\n      ctx.lineTo(offset, height - verticalSpacing);\n      ctx.moveTo(offset, verticalSpacing);\n      ctx.lineTo(offset - halfArrowWidth, one5thHeight);\n      ctx.moveTo(offset, verticalSpacing);\n      ctx.lineTo(offset + halfArrowWidth, one5thHeight);\n    }\n\n    // Draw the down-pointing arrows for the deadline\n    for (let i = 0; i * interval + arrivalOffset + deadlineOffset < width; i++) {\n      const offset = i * interval + arrivalOffset + deadlineOffset;\n      ctx.moveTo(offset, verticalSpacing);\n      ctx.lineTo(offset, height - verticalSpacing);\n      ctx.lineTo(offset - halfArrowWidth, four5thHeight);\n      ctx.moveTo(offset, height - verticalSpacing);\n      ctx.lineTo(offset + halfArrowWidth, four5thHeight);\n    }\n\n    ctx.stroke();\n  });\n\n  return <canvas ref={ref} style={{ width: chartBodyCtx.chartBodyWidth, height: '100%' }}></canvas>;\n};\n```\n\n</details>\n\n### With Annotations Only\n\nUsing annotations can be so powerful. This allows a very good customization of the timeline as desired. The\nchart can be made to contain only custom annotations that utilize the other features available in the\n`TimelineChart`. By default, the annotations are set so that they dont interact with the mouse. If an\ninteraction with the mouse is needed for the custom annotation, the annotation should have the\n`pointerEvents` set to _auto_ in its own style.\n\nThe example below shows the timeline for the some of the most momentuous inventions in the\nlast 6000 years from the year 2022. These annotations have been made using SVG just to\ndemonstrate that any valid element can be used for making the annotations.\n\n<Canvas>\n  <Story\n    name=\"With Annotations Only\"\n    args={{\n      dataset: inventionDataset,\n      totalDuration: 6000,\n      showAnnotation: true,\n      rowHeight: 80,\n      activitiesTitle: '',\n      durationTitle: '# of Years Ago',\n      valueFormat: (x) => Number.parseFloat(x).toFixed(1)\n    }}\n  >\n    {(props) => (\n      <TimelineChart\n        {...props}\n        annotations={\n          <>\n            <TimelineChartAnnotation\n              rowIndex={0}\n              figure={\n                <>\n                  <Invention\n                    name={'internet'}\n                    rowHeight={80}\n                    time={50}\n                    totalDuration={6000}\n                    color={ThemingParameters.sapChart_OrderedColor_9}\n                  />\n                  <Invention\n                    name={'penicillin'}\n                    rowHeight={80}\n                    time={82}\n                    totalDuration={6000}\n                    color={ThemingParameters.sapChart_OrderedColor_2}\n                  />\n                  <Invention\n                    name={'airplane'}\n                    rowHeight={80}\n                    time={118}\n                    totalDuration={6000}\n                    color={ThemingParameters.sapChart_OrderedColor_1}\n                  />\n                  <Invention\n                    name={'lightbulb'}\n                    rowHeight={80}\n                    time={143}\n                    totalDuration={6000}\n                    color={ThemingParameters.sapChart_OrderedColor_3}\n                  />\n                  <Invention\n                    name={'telephone'}\n                    rowHeight={80}\n                    time={146}\n                    totalDuration={6000}\n                    color={ThemingParameters.sapChart_OrderedColor_4}\n                  />\n                  <Invention\n                    name={'steamengine'}\n                    rowHeight={80}\n                    time={258}\n                    totalDuration={6000}\n                    color={ThemingParameters.sapChart_OrderedColor_5}\n                  />\n                  <Invention\n                    name={'printingpress'}\n                    rowHeight={80}\n                    time={582}\n                    totalDuration={6000}\n                    color={ThemingParameters.sapChart_OrderedColor_6}\n                  />\n                  <Invention\n                    name={'compass'}\n                    rowHeight={80}\n                    time={1100}\n                    totalDuration={6000}\n                    color={ThemingParameters.sapChart_OrderedColor_7}\n                  />\n                  <Invention\n                    name={'wheel'}\n                    rowHeight={80}\n                    time={5500}\n                    totalDuration={6000}\n                    color={ThemingParameters.sapChart_OrderedColor_8}\n                  />\n                </>\n              }\n            />\n          </>\n        }\n      />\n    )}\n  </Story>\n</Canvas>\n\n### With More Customization\n\nA lot more things can be customized in the `TimelineChart`. These include:\n\n- The color of each item on a row.\n- The label of each item on a row.\n- The kind of connections between two different items:\n  1. Start-To-Start\n  2. Start-To-Finish\n  3. Finish-To-Start\n  4. Finish-To-Finish\n\n<Canvas>\n  <Story\n    name=\"With More Customization\"\n    args={{\n      dataset: dummyDataSet,\n      totalDuration: 150,\n      showConnection: true,\n      showAnnotation: true,\n      unit: 'ms'\n    }}\n  >\n    {(props) => <TimelineChart {...props} />}\n  </Story>\n</Canvas>\n\n### Loading Placeholder\n\n<Canvas>\n  <Story name=\"Loading Placeholder\">\n    <TimelineChart />\n  </Story>\n</Canvas>\n\n<Markdown>{SubcomponentsSection}</Markdown>\n\n## TimelineChartAnnotation\n\nThe `TimelineChartAnnotation` is designed to be used for creating custom annotations, markers\nor illustrations on the timeline of the chart.\n\n<Footer />\n"],"names":["now","throttle","func","wait","options","timeout","context","args","result","previous","later","throttled","params","_now","remaining","DEFAULT_WIDTH","ROW_TITLE_WIDTH","COLUMN_HEADER_HEIGHT","DEFAULT_ROW_HEIGHT","DEFAULT_CHART_VERTICAL_COLS","INVALID_DISCRETE_LABELS_MESSAGE","ILLEGAL_CONNECTION_MESSAGE","MOUSE_CURSOR_AUTO","MOUSE_CURSOR_GRAB","MOUSE_CURSOR_GRABBING","TOLERANCE","SCALE_FACTOR","THROTTLE_INTERVAL","NORMAL_OPACITY","HOVER_OPACITY","ARROWHEAD_WIDTH","ARROWHEAD_HEIGHT","ARROW_CLEARANCE","MAX_BODY_WIDTH","TICK_LENGTH","SPACING","TimelineChartBodyCtx","createContext","solidOutline","ThemingParameters","styles","useStyles","createUseStyles","TimelineChartGrid","isDiscrete","numOfRows","rowHeight","totalDuration","width","unscaledWidth","verticalSegmentWidth","jsxs","generateHGridLines","generateDiscreteVGridLines","generateNonDiscreteVGridLines","numOfSegments","gridLineArray","i","segmentOffset","jsx","segmentSizePercent","covered","TimelineChartLayer","ignoreClick","isAnnotation","children","name","classes","position","pointerEvents","TimelineChartRow","rowData","rowIndex","timelineStart","showTooltip","hideTooltip","_a","task","index","TimelineTask","_b","mStone","TimelineMilestone","id","label","startTime","duration","color","opacity","setOpacity","useState","onMouseLeave","evt","onMouseMove","time","milestoneRef","useRef","useEffect","milestone","rhombusDiagonal","rhombusSideLength","TimelineChartRowGroup","dataset","postRender","data","TimelineChartConnection","TimelineChartConnections","dataSet","bodyRect","connectionDataState","setConnectionDataState","useIsomorphicLayoutEffect","connectionDataArray","row","generateConnectionData","ConnectionArrow","depType","startX","startY","endX","endY","halfRowHeight","finishX","finishY","arrowColor","generateF2SArrow","generateS2FArrow","generateS2SArrow","generateF2FArrow","Fragment","generateStartingPoint","generateStartFacingHead","generateEndFacingHead","x","y","activities","activity","startItem","right","height","item","endItem","otherX","otherY","otherR","TimelineChartBody","numOfItems","annotations","showAnnotation","showConnection","unit","start","onScale","valueFormat","resetScroll","tooltipRef","bodyRef","scaleExpRef","displayArrows","setDisplayArrows","onMouseWheelEvent","style","showTooltipOnHover","mouseX","mouseY","isMilestone","showArrows","TimelineChartTooltip","forwardRef","ref","state","setState","divRef","popupRef","onHoverItem","offSetX","offSetY","xPos","yPos","onLeaveItem","useImperativeHandle","TimelineChartPlaceholder","props","ContentLoader","TimelineChartRowLabels","rowLabels","itemStyle","TimelineChartColumnLabel","columnLabels","labelArray","setLabelArray","newLabelArray","num","halfHeaderHeight","generateIntermediateTicks","tickLength","spacing","lineArray","textArray","val","TimelineChartRowTitle","rowTitle","IllegalConnectionError","message","InvalidDiscreteLabelError","TimelineChart","columnTitle","discreteLabels","rest","fRef","bodyConRef","dimensions","setDimensions","chartBodyScale","setChartBodyScale","isGrabbed","setIsGrabbed","mPos","setMPos","ro","entries","entry","width2","height2","validateConnections","scaleChartBody","value","onMouseDown","e","onMouseUp","dx","getCursor","unscaledBodyWidth","bodyWidth","TimelineChartAnnotation","figure","dummyDataSet","dummyDiscreteDataSet","schedulingEDFData","inventionDataset","TimingFigure","arrival","period","deadline","verticalSpacing","halfArrowWidth","chartBodyCtx","useContext","canvas","ctx","one5thHeight","four5thHeight","interval","arrivalOffset","deadlineOffset","offset","Invention","three4thRowHeight","d","rLarge","a","b","x0","y0","x1","x2","y1","y2","setoffset","chartBodyDim","useLayoutEffect","xOffset","INVENTION_DESCRIPTION_MAP","INVENTION_ICON_MAP","MDXContent","MDXLayout","_provideComponents","_jsx","_createMdxContent","_components","_jsxs","_Fragment","Meta","DocsHeader","Canvas","Story","ArgsTable","Markdown","SubcomponentsSection","Footer","defaultStory","withAnnotations","withAnnotationsOnly","withMoreCustomization","loadingPlaceholder","componentMeta","__namedExportsOrder"],"mappings":"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mB,GAAA6I,EACf,MAAA/C,EACJ,sBAAA,0BACoB,SAAA0E,CAEnB,CAAA,CACH,CAGN,EAEAD,EAAA,YAAA;;;;;;;;;;;;;;uICrEO,MAAME,GAAoC,CAC/C,CACE,MAAO,QACP,MAAO,OACP,MAAO,CACL,CACE,GAAI,QACJ,MAAO,SACP,MAAO,EACP,SAAU,GACV,YAAa,CACX,CACE,OAAQ,QACR,KAAMnI,EAAwB,eAChC,CACF,CACF,EACA,CACE,GAAI,QACJ,MAAO,SACP,MAAO,GACP,SAAU,IACV,MAAO,QACP,YAAa,CACX,CACE,OAAQ,QACR,KAAMA,EAAwB,cAChC,CACF,CACF,CACF,EACA,WAAY,CAAC,CACf,EACA,CACE,MAAO,QACP,MAAO,MACP,MAAO,CACL,CACE,GAAI,QACJ,MAAO,SACP,MAAO,GACP,SAAU,GACV,MAAO,SACP,YAAa,CACX,CACE,OAAQ,QACR,KAAMA,EAAwB,gBAChC,CACF,CACF,EACA,CACE,GAAI,QACJ,MAAO,SACP,MAAO,GACP,SAAU,EACV,YAAa,CACX,CACE,OAAQ,OACV,EACA,CACE,OAAQ,QACR,KAAMA,EAAwB,cAChC,CACF,CACF,CACF,EACA,WAAY,CAAC,CACf,EACA,CACE,MAAO,QACP,MAAO,SACP,MAAO,CACL,CACE,GAAI,QACJ,MAAO,SACP,MAAO,GACP,SAAU,EACZ,EACA,CACE,GAAI,QACJ,MAAO,GACP,SAAU,EACZ,CACF,EACA,WAAY,CACV,CACE,GAAI,QACJ,MAAO,IACP,MAAO,eACP,YAAa,CACX,CACE,OAAQ,QACR,KAAMA,EAAwB,gBAChC,CACF,CACF,CACF,CACF,CACF,EAEaoI,GAA4C,CACvD,CACE,MAAO,YACP,MAAO,OACP,MAAO,CACL,CACE,GAAI,SACJ,MAAO,EACP,SAAU,EACV,YAAa,CACX,CACE,OAAQ,QACV,CACF,CACF,CACF,CACF,EACA,CACE,MAAO,uBAEP,MAAO,CACL,CACE,GAAI,SACJ,MAAO,GACP,SAAU,EACV,YAAa,CACX,CACE,OAAQ,QACV,CACF,CACF,CACF,CACF,EACA,CACE,MAAO,iBACP,MAAO,CACL,CACE,GAAI,SACJ,MAAO,EACP,SAAU,EACV,YAAa,CACX,CACE,OAAQ,QACV,CACF,CACF,CACF,CACF,EACA,CACE,MAAO,GACP,WAAY,CACV,CACE,GAAI,SACJ,MAAO,UACP,MAAO,GACP,YAAa,CACX,CACE,OAAQ,QACV,EACA,CACE,OAAQ,QACV,CACF,CACF,CACF,CACF,EACA,CACE,MAAO,iBACP,MAAO,CACL,CACE,GAAI,SACJ,MAAO,GACP,SAAU,EACV,YAAa,CACX,CACE,OAAQ,QACV,CACF,CACF,CACF,CACF,EACA,CACE,MAAO,iBACP,MAAO,CACL,CACE,GAAI,SACJ,MAAO,GACP,SAAU,EACV,YAAa,CACX,CACE,OAAQ,QACV,CACF,CACF,CACF,CACF,EACA,CACE,MAAO,GACP,WAAY,CACV,CACE,GAAI,SACJ,MAAO,YACP,MAAO,GACP,MAAO,KACT,CACF,CACF,CACF,EAEaC,GAAyC,CACpD,CACE,MAAO,YACP,MAAO,CACL,CACE,MAAO,EACP,SAAU,CACZ,EACA,CACE,MAAO,EACP,SAAU,CACZ,EACA,CACE,MAAO,EACP,SAAU,CACZ,EACA,CACE,MAAO,GACP,SAAU,CACZ,CACF,CACF,EACA,CACE,MAAO,YACP,MAAO,CACL,CACE,MAAO,EACP,SAAU,CACZ,EACA,CACE,MAAO,GACP,SAAU,CACZ,CACF,CACF,EACA,CACE,MAAO,YACP,MAAO,CACL,CACE,MAAO,EACP,SAAU,CACZ,EACA,CACE,MAAO,EACP,SAAU,CACZ,EACA,CACE,MAAO,EACP,SAAU,CACZ,CACF,CACF,CACF,EAEaC,GAAwC,CACnD,CACE,MAAO,YACT,CACF,ECjQOC,EAAA,CAAA,CAAA,QAAAC,EAAA,OAAAC,EAAA,SAAAC,EAAA,cAAApM,CAAA,IAAA,CACL,MAAA0H,EAAAzE,EAAAA,SACAoJ,EAAA,EACAC,EAAA,EACAC,EAAAC,aAAAnN,EAAA,EAEA6D,OAAAA,EAAAA,UAAA,IAAA,CACE,MAAAuJ,EAAA/E,EAAA,QACAgF,EAAAD,EAAA,WAAA,IAAA,EAGAA,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"}