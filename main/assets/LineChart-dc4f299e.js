import{a as S,j as n}from"./jsx-runtime-670450c2.js";import{T as h}from"./ThemingParameters-f4b4144e.js";import{e as V}from"./index-99d317a4.js";import{r as b}from"./index-f1f749bf.js";import{X as I,Y as x,u as ie,a as re,C as se,c as le,b as D}from"./YAxisTicks-18ff6813.js";import{u as ce,C as de}from"./ChartDataLabel-2767f723.js";import{u as he,x as ue,t as pe,a as me,b as fe}from"./staticProps-9dd6f0f9.js";import{u as ge}from"./useLongestYAxisLabel-26027963.js";import{u as ye,a as Ce,r as be}from"./useTooltipFormatter-ebb5c235.js";import{C as xe}from"./ChartContainer-c5875063.js";import{d as Y}from"./defaults-76d73b58.js";import{C as Ae}from"./react-content-loader.es-de0c8b5a.js";import{h as ke,i as ve,L as we,R as Le,T as _e,a as Pe}from"./generateCategoricalChart-406a9f5a.js";import{L as z}from"./Line-f6216426.js";import{u as Te}from"./withWebComponent-65cd39a0.js";import{u as Ve}from"./debounce-2c3bc435.js";var De=ke({chartName:"LineChart",GraphicalChild:z,axisComponents:[{axisType:"xAxis",AxisComp:I},{axisType:"yAxis",AxisComp:x}],formatAxisMap:ve});const A=i=>S(Ae,{viewBox:"0 0 165 145",preserveAspectRatio:"xMidYMid meet",width:"100%",height:"100%",speed:2,backgroundColor:h.sapContent_ImagePlaceholderBackground,foregroundColor:h.sapContent_ImagePlaceholderForegroundColor,backgroundOpacity:h.sapContent_DisabledOpacity,...i,children:[n("rect",{x:"10",y:"135",width:"135",height:"1"}),n("path",{d:"M20 135 L40 80 L60 70 L80 30 L100 50 L120 65 L 135 100 L120 67 L100 52 L80 32 L60 72 L40 82 L20 137 Z",fill:"none",strokeWidth:"2"})]});try{A.displayName="LineChartPlaceholder",A.__docgenInfo={description:"",displayName:"LineChartPlaceholder",props:{}}}catch{}const Se={formatter:Y},Ie={formatter:Y,width:1,opacity:1},f=b.forwardRef((i,q)=>{var _,P;const{dataset:s,loading:R,noLegend:N,noAnimation:j,tooltipConfig:u,onDataPointClick:p,onLegendClick:F,onClick:k,style:K,className:O,slot:E,syncId:H,ChartPlaceholder:M,children:B,...W}=i,t={yAxisVisible:!1,xAxisVisible:!0,gridStroke:h.sapList_BorderColor,gridHorizontal:!0,gridVertical:!1,legendPosition:"bottom",legendHorizontalAlign:"left",zoomingTool:!1,resizeDebounce:250,yAxisTicksVisible:!0,yAxisConfig:{},xAxisConfig:{},secondYAxisConfig:{},...i.chartConfig},{dimensions:v,measures:l}=ye(i.dimensions,i.measures,Se,Ie),$=Ce(l),r=v[0],{primaryMeasure:m,secondaryMeasure:U}=be(l,(_=t==null?void 0:t.secondYAxis)==null?void 0:_.dataKey),X=ce(r),[G,w]=Te(q),Z=l.map(({accessor:e})=>e),g=t.secondYAxis?Z.findIndex(e=>{var o;return e===((o=t.secondYAxis)==null?void 0:o.dataKey)}):0,J=he(F),c=b.useRef(0),L=b.useCallback((e,o)=>{var d,T;o.dataKey&&typeof p=="function"?(c.current=2,p(V({},{value:o.value,dataKey:o.dataKey,dataIndex:o.index,payload:o.payload}))):typeof k=="function"&&c.current===0&&k(V(o,{payload:(T=(d=e==null?void 0:e.activePayload)==null?void 0:d[0])==null?void 0:T.payload,activePayloads:e==null?void 0:e.activePayload})),c.current>0&&(c.current-=1)},[p,c.current]),y=(s==null?void 0:s.length)>30,Q=r==null?void 0:r.accessor,[ee,te]=ge(s,l),ae=ie(t.margin,t.zoomingTool),oe=re(w,i.dimensions.length),{chartConfig:Ye,dimensions:ze,measures:qe,...ne}=W,C=Ve(w),a=t.referenceLine;return n(xe,{dataset:s,loading:R,Placeholder:M??A,ref:G,style:K,className:O,slot:E,resizeDebounce:t.resizeDebounce,...ne,children:S(De,{syncId:H,margin:ae,data:s,onClick:L,className:typeof p=="function"?"has-click-handler":void 0,children:[n(se,{vertical:t.gridVertical,horizontal:t.gridHorizontal,stroke:t.gridStroke}),v.map((e,o)=>n(I,{dataKey:e.accessor,xAxisId:o,interval:(e==null?void 0:e.interval)??(y?"preserveStart":0),tick:n(le,{config:e}),tickLine:o<1,axisLine:o<1,height:t.xAxisVisible?oe[o]:0,padding:ue,allowDuplicatedCategory:o===0,reversed:C,...t.xAxisConfig},e.accessor)),n(x,{orientation:C===!0?"right":"left",axisLine:t.yAxisVisible,tickLine:pe,yAxisId:"left",tickFormatter:m==null?void 0:m.formatter,interval:0,tick:t.yAxisTicksVisible&&n(D,{config:m}),width:ee,...t.yAxisConfig}),((P=t.secondYAxis)==null?void 0:P.dataKey)&&n(x,{dataKey:t.secondYAxis.dataKey,axisLine:{stroke:t.secondYAxis.color??`var(--sapChart_OrderedColor_${g%11+1})`},tick:n(D,{config:U,secondYAxisConfig:{color:t.secondYAxis.color??`var(--sapChart_OrderedColor_${g%11+1})`}}),tickLine:{stroke:t.secondYAxis.color??`var(--sapChart_OrderedColor_${g%11+1})`},label:{value:t.secondYAxis.name,offset:2,angle:90,position:"center"},orientation:C===!0?"left":"right",yAxisId:"right",interval:0,...t.secondYAxisConfig}),l.map((e,o)=>{var d;return n(z,{dot:e.showDot??!y,yAxisId:((d=t.secondYAxis)==null?void 0:d.dataKey)===e.accessor?"right":"left",name:e.label??e.accessor,strokeOpacity:e.opacity,label:y?!1:n(de,{config:e,chartType:"line",position:"top"}),type:"monotone",dataKey:e.accessor,stroke:e.color??`var(--sapChart_OrderedColor_${o%11+1})`,strokeWidth:e.width,activeDot:{onClick:L},isAnimationActive:j===!1,...e.lineConfig},e.accessor)}),!N&&n(we,{verticalAlign:t.legendPosition,align:t.legendHorizontalAlign,onClick:J,wrapperStyle:te}),a&&n(Le,{...a,stroke:(a==null?void 0:a.color)??(a==null?void 0:a.stroke),y:(a==null?void 0:a.value)??(a==null?void 0:a.y),yAxisId:(a==null?void 0:a.yAxisId)??"left",label:a==null?void 0:a.label}),(u==null?void 0:u.active)!==!1&&n(_e,{cursor:me,formatter:$,contentStyle:fe,labelFormatter:X,...u}),t.zoomingTool&&n(Pe,{y:10,dataKey:Q,tickFormatter:r==null?void 0:r.formatter,stroke:h.sapObjectHeader_BorderColor,travellerWidth:10,height:20}),B]})})});f.defaultProps={noLegend:!1,noAnimation:!1};f.displayName="LineChart";try{f.displayName="LineChart",f.__docgenInfo={description:"A `LineChart` is a type of chart used to show information that changes over time - it connects multiple dots.",displayName:"LineChart",props:{dimensions:{defaultValue:null,description:`An array of config objects. Each object will define one dimension of the chart.

**Required Properties**
- \`accessor\`: string containing the path to the dataset key the dimension should display. Supports object structures by using <code>'parent.child'</code>.
  Can also be a getter.

**Optional Properties**
- \`formatter\`: function will be called for each data label and allows you to format it according to your needs
- \`interval\`: number that controls how many ticks are rendered on the x axis`,name:"dimensions",required:!0,type:{name:"DimensionConfig[]"}},measures:{defaultValue:null,description:"An array of config objects. Each object is defining one line in the chart.\n\n**Required properties**\n- `accessor`: string containing the path to the dataset key this line should display. Supports object structures by using <code>'parent.child'</code>.\n  Can also be a getter.\n\n**Optional properties**\n\n- `label`: Label to display in legends or tooltips. Falls back to the <code>accessor</code> if not present.\n- `color`: any valid CSS Color or CSS Variable. Defaults to the `sapChart_Ordinal` colors\n- `formatter`: function will be called for each data label and allows you to format it according to your needs\n- `hideDataLabel`: flag whether the data labels should be hidden in the chart for this line.\n- `DataLabel`: a custom component to be used for the data label\n- `width`: line width, defaults to `1`\n- `opacity`: line opacity, defaults to `1`\n- `showDot`: Flag whether the line dot should be displayed or not.\n- `lineConfig`: This prop allows passing all [Line Properties](https://recharts.org/en-US/api/Line) of the Recharts library.",name:"measures",required:!0,type:{name:"MeasureConfig[]"}},loading:{defaultValue:null,description:`Flag whether the chart should display a loading indicator.

This can either be a placeholder shimmer (in case the chart has no data yet) or a small
loading bar in the top of the chart (in case the chart has already some data to display).`,name:"loading",required:!1,type:{name:"boolean"}},dataset:{defaultValue:null,description:"The `dataset` is an array of object which will be displayed in the chart.",name:"dataset",required:!1,type:{name:"Record<string, unknown>[]"}},children:{defaultValue:null,description:"With the help of the `children` prop you can add more svg elements to the chart, e.g. if you want to display\na linear gradient.",name:"children",required:!1,type:{name:"ReactNode | ReactNode[]"}},noLegend:{defaultValue:{value:"false"},description:"`noLegend` toggles the visibility of the legend below the chart. If this prop is `true`, no legend will be rendered.",name:"noLegend",required:!1,type:{name:"boolean"}},onClick:{defaultValue:null,description:"Fired when clicked anywhere in the chart.",name:"onClick",required:!1,type:{name:"(event: CustomEvent<{ payload: unknown; activePayloads: Record<string, unknown>[]; }>) => void"}},onDataPointClick:{defaultValue:null,description:"The `onDataPointClick` event fires whenever the user clicks on e.g. a  bar in `BarChart` or a point the `LineChart`.\n\nYou can use this event to trigger e.g. navigations or set filters based on the last clicked data point.",name:"onDataPointClick",required:!1,type:{name:"(event: CustomEvent<any>) => void"}},onLegendClick:{defaultValue:null,description:`The \`onLegendClick\` event fires when the user clicks on a label of the legend.

This can be useful to e.g. show/hide the current dataset in case you have multiple datasets in in your chart.
@param event`,name:"onLegendClick",required:!1,type:{name:"(event: CustomEvent<any>) => void"}},noAnimation:{defaultValue:{value:"false"},description:"`noAnimation` disables all chart animations when set to `true`.",name:"noAnimation",required:!1,type:{name:"boolean"}},chartConfig:{defaultValue:null,description:'Defines possible configurations of the chart.\n\n**Properties available on all charts:**\n\n- `margin`: Sets the margin of the chart container. Receives a object with four possible properties (`right`, `left`, `top`, `bottom`) that expect a number as value.\n- `legendPosition`: Position of the legend. Can be one of the following: `"top"`, `"left"`, `"right"`, `"bottom"`\n- `legendHorizontalAlign`: Alignment of the legend. Can be one of the following: `"left"`, `"center"`, `"right"`\n- `resizeDebounce`: Number that sets the amount of delay time the chart waits when resizing.\n\nPlease note that depending on the chart type, the `chartConfig` prop may accept more properties.',name:"chartConfig",required:!1,type:{name:"ICartesianChartConfig & { margin?: { right: number; left: number; top: number; bottom: number; }; legendPosition?: string; legendHorizontalAlign?: string; resizeDebounce?: number; }"}},tooltipConfig:{defaultValue:null,description:`Defines the configuration object for the internally used \`recharts\` Tooltip popover that is displayed when hovering over data points.
You can find all possible configuration properties [here](https://recharts.org/en-US/api/Tooltip).

__Note:__ It is possible to overwrite internally used tooltip props, so use with caution!`,name:"tooltipConfig",required:!1,type:{name:"Props<string | number | (string | number)[], string | number> & { allowEscapeViewBox?: { x?: boolean; y?: boolean; }; reverseDirection?: { x?: boolean; y?: boolean; }; content?: ContentType<string | number | (string | number)[], string | number>; ... 14 more ...; useTranslate3d?: boolean; }"}},syncId:{defaultValue:null,description:`A string which defines an id to synchronize two separate charts. Charts with the same syncId synchronize the position
of the tooltips, the startIndex and the endIndex of the zooming tool.`,name:"syncId",required:!1,type:{name:"string"}},ChartPlaceholder:{defaultValue:null,description:`Injects a custom loading placeholder which is used when no data are available. If the property isn't set the
standard loading placeholder of the specific chart is used.`,name:"ChartPlaceholder",required:!1,type:{name:"ComponentType<{}>"}},style:{defaultValue:null,description:`Element style which will be appended to the most outer element of a component.
Use this prop carefully, some css properties might break the component.`,name:"style",required:!1,type:{name:"CSSProperties"}},className:{defaultValue:null,description:`CSS Class Name which will be appended to the most outer element of a component.
Use this prop carefully, overwriting CSS rules might break the component.`,name:"className",required:!1,type:{name:"string"}}}}}catch{}export{f as L};
//# sourceMappingURL=LineChart-dc4f299e.js.map
