{"version":3,"file":"index-41100bc8.js","sources":["../../packages/main/src/enums/FormBackgroundDesign.ts","../../packages/main/src/components/Form/Form.jss.ts","../../packages/main/src/components/Form/index.tsx","../../packages/main/src/components/FormGroup/index.tsx","../../packages/main/src/components/FormItem/index.tsx"],"sourcesContent":["export enum FormBackgroundDesign {\n  /**\n   * A solid background color dependent on the theme.\n   */\n  Solid = 'Solid',\n  /**\n   * Transparent background.\n   */\n  Transparent = 'Transparent'\n}\n","import { ThemingParameters } from '@ui5/webcomponents-react-base';\n\nconst labelSpanClasses = () => {\n  const styleClasses = {};\n  for (let i = 1; i <= 11; i++) {\n    styleClasses[`labelSpan${i}`] = {\n      '--ui5wcr_form_content_span': 12 - i,\n      '--ui5wcr_form_label_span': i\n    };\n  }\n  return styleClasses;\n};\n\nconst styles = {\n  form: {\n    display: 'grid',\n    alignItems: 'center',\n    rowGap: '0.25rem',\n    columnGap: '0.5rem',\n    gridTemplateColumns: `repeat(12, 1fr)`,\n    '--ui5wcr_form_full_span': 'span 12',\n    '--ui5wcr_form_label_text_align': 'end',\n    '&[data-columns=\"1\"]': {},\n    '&[data-columns=\"2\"]': {\n      gridTemplateColumns: `repeat(24, 1fr)`,\n      '--ui5wcr_form_full_span': 'span 24'\n    },\n    '&[data-columns=\"3\"]': {\n      gridTemplateColumns: `repeat(36, 1fr)`,\n      '--ui5wcr_form_full_span': 'span 36'\n    },\n    '&[data-columns=\"4\"]': {\n      gridTemplateColumns: `repeat(48, 1fr)`,\n      '--ui5wcr_form_full_span': 'span 48'\n    },\n    '&[data-columns=\"5\"]': {\n      gridTemplateColumns: `repeat(60, 1fr)`,\n      '--ui5wcr_form_full_span': 'span 60'\n    },\n    '&[data-columns=\"6\"]': {\n      gridTemplateColumns: `repeat(72, 1fr)`,\n      '--ui5wcr_form_full_span': 'span 72'\n    },\n    '&[data-columns=\"7\"]': {\n      gridTemplateColumns: `repeat(84, 1fr)`,\n      '--ui5wcr_form_full_span': 'span 84'\n    },\n    '&[data-columns=\"8\"]': {\n      gridTemplateColumns: `repeat(96, 1fr)`,\n      '--ui5wcr_form_full_span': 'span 96'\n    },\n    '&[data-columns=\"9\"]': {\n      gridTemplateColumns: `repeat(108, 1fr)`,\n      '--ui5wcr_form_full_span': 'span 108'\n    },\n    '&[data-columns=\"10\"]': {\n      gridTemplateColumns: `repeat(120, 1fr)`,\n      '--ui5wcr_form_full_span': 'span 120'\n    },\n    '&[data-columns=\"11\"]': {\n      gridTemplateColumns: `repeat(132, 1fr)`,\n      '--ui5wcr_form_full_span': 'span 132'\n    },\n    '&[data-columns=\"12\"]': {\n      gridTemplateColumns: `repeat(144, 1fr)`,\n      '--ui5wcr_form_full_span': 'span 144'\n    }\n  },\n  solid: {\n    backgroundColor: ThemingParameters.sapGroup_ContentBackground\n  },\n  transparent: {\n    backgroundColor: 'transparent'\n  },\n  formTitle: {\n    borderBlockEnd: `1px solid ${ThemingParameters.sapGroup_TitleBorderColor}`,\n    marginBlockEnd: '1.75rem',\n    gridColumn: 'var(--ui5wcr_form_full_span)'\n  },\n  ...labelSpanClasses(),\n  labelSpan12: {\n    '--ui5wcr_form_content_span': 12,\n    '--ui5wcr_form_label_text_align': 'start',\n    '--ui5wcr_form_label_span': 12,\n    rowGap: 0\n  }\n};\n\nexport { styles };\n","'use client';\n\nimport { CssSizeVariables, Device, ThemingParameters, useSyncRef } from '@ui5/webcomponents-react-base';\nimport { clsx } from 'clsx';\nimport React, {\n  Children,\n  cloneElement,\n  CSSProperties,\n  ElementType,\n  forwardRef,\n  ReactElement,\n  ReactNode,\n  useEffect,\n  useMemo,\n  useRef,\n  useState\n} from 'react';\nimport { createUseStyles } from 'react-jss';\nimport { FormBackgroundDesign, TitleLevel } from '../../enums';\nimport { CommonProps } from '../../interfaces/CommonProps';\nimport { Title } from '../../webComponents/Title';\nimport { styles } from './Form.jss';\n\nexport interface FormPropTypes extends CommonProps {\n  /**\n   * Components that are placed into Form.\n   *\n   * __Note:__ Although this prop accepts all HTML Elements, it is strongly recommended that you only use `FormGroup` or `FormItem` in order to preserve the intended design.\n   */\n  children: ReactNode | ReactNode[];\n  /**\n   * Specifies the background color of the Form content.\n   */\n  backgroundDesign?: FormBackgroundDesign;\n  /**\n   * Form title\n   */\n  titleText?: string;\n  /**\n   * Form columns for small size (`< 600px`).\n   * Must be a number between 1 and 12.\n   *\n   * Default Value: 1\n   */\n  columnsS?: number;\n  /**\n   * Form columns for medium size (`600px` - `1023px`).\n   * Must be a number between 1 and 12.\n   *\n   * Default Value: 1\n   *\n   * __Note__: The number of columns for medium size must not be smaller than the number of columns for small size.\n   */\n  columnsM?: number;\n  /**\n   * Form columns for large size (`1024px` - `1439px`).\n   * Must be a number between 1 and 12.\n   *\n   * Default Value: 1\n   *\n   * __Note:__ The number of columns for large size must not be smaller than the number of columns for medium size.\n   */\n  columnsL?: number;\n  /**\n   * Form columns for extra large size (`>= 1440px`).\n   * Must be a number between 1 and 12.\n   *\n   * Default Value: 2\n   *\n   * __Note:__ The number of columns for extra large size must not be smaller than the number of columns for large size.\n   */\n  columnsXL?: number;\n\n  /**\n   * Default span for labels in small size (`< 600px`).\n   * Must be a number between 1 and 12.\n   *\n   * Default Value: 12\n   */\n  labelSpanS?: number;\n  /**\n   * Default span for labels in medium size (`600px` - `1023px`).\n   * Must be a number between 1 and 12.\n   *\n   * Default Value: 2\n   */\n  labelSpanM?: number;\n  /**\n   * Default span for labels in large size (`1024px` - `1439px`).\n   * Must be a number between 1 and 12.\n   *\n   * Default Value: 4\n   */\n  labelSpanL?: number;\n  /**\n   * Default span for labels in extra large size (`>= 1440px`).\n   * Must be a number between 1 and 12.\n   *\n   * Default Value: 4\n   */\n  labelSpanXL?: number;\n  /**\n   * Sets the components outer HTML tag.\n   *\n   * __Note:__ For TypeScript the types of `ref` are bound to the default tag name, if you change it you are responsible to set the respective types yourself.\n   */\n  as?: keyof HTMLElementTagNameMap;\n}\n\nconst clonedChildrenForSingleColumn = (reactChildren, currentLabelSpan) =>\n  Children.map(reactChildren, (child) => {\n    if (child?.type?.displayName === 'FormItem') {\n      return cloneElement(child, { labelSpan: currentLabelSpan });\n    }\n    if (child?.type?.displayName === 'FormGroup') {\n      return cloneElement(child, { children: clonedChildrenForSingleColumn(child.props.children, currentLabelSpan) });\n    }\n    return child;\n  });\n\nconst useStyles = createUseStyles(styles, { name: 'Form' });\n/**\n * The `Form` component arranges labels and fields into groups and rows. There are different ways to visualize forms for different screen sizes.\n * It is possible to change the alignment of all labels by setting the CSS `align-items` property, per default all labels are centered.\n */\nconst Form = forwardRef<HTMLFormElement, FormPropTypes>((props, ref) => {\n  const {\n    as,\n    backgroundDesign,\n    children,\n    columnsS,\n    columnsM,\n    columnsL,\n    columnsXL,\n    className,\n    labelSpanS,\n    labelSpanM,\n    labelSpanL,\n    labelSpanXL,\n    slot,\n    titleText,\n    style,\n    ...rest\n  } = props;\n\n  const columnsMap = new Map();\n  columnsMap.set('Phone', columnsS);\n  columnsMap.set('Tablet', columnsM);\n  columnsMap.set('Desktop', columnsL);\n  columnsMap.set('LargeDesktop', columnsXL);\n\n  const labelSpanMap = new Map();\n  labelSpanMap.set('Phone', labelSpanS);\n  labelSpanMap.set('Tablet', labelSpanM);\n  labelSpanMap.set('Desktop', labelSpanL);\n  labelSpanMap.set('LargeDesktop', labelSpanXL);\n\n  const [componentRef, formRef] = useSyncRef<HTMLFormElement>(ref);\n  // use the window range set as first best guess, if not available use Desktop\n  const [currentRange, setCurrentRange] = useState(Device.getCurrentRange()?.name ?? 'Desktop');\n  const lastRange = useRef(currentRange);\n\n  useEffect(() => {\n    const observer = new ResizeObserver(([form]) => {\n      const rangeInfo = Device.getCurrentRange(form.contentRect.width);\n      if (rangeInfo && lastRange.current !== rangeInfo.name) {\n        lastRange.current = rangeInfo.name;\n        setCurrentRange(rangeInfo.name);\n      }\n    });\n\n    if (formRef.current) {\n      observer.observe(formRef.current);\n    }\n\n    return () => {\n      observer.disconnect();\n    };\n  }, [formRef, setCurrentRange, lastRange]);\n\n  const classes = useStyles();\n\n  const currentNumberOfColumns = columnsMap.get(currentRange);\n  const currentLabelSpan = labelSpanMap.get(currentRange);\n\n  const [formGroups, updatedTitle] = useMemo(() => {\n    const computedFormGroups = [];\n    if (Children.count(children) === 1 && !titleText) {\n      const singleChild = (Array.isArray(children) ? children[0] : children) as ReactElement;\n      if (singleChild?.props?.title?.length > 0) {\n        return [cloneElement(singleChild, { title: null }), singleChild.props.title];\n      }\n    }\n\n    const currentColumnCount = currentNumberOfColumns;\n    if (currentColumnCount === 1) {\n      return [clonedChildrenForSingleColumn(children, currentLabelSpan), titleText];\n    }\n\n    const rows = [];\n    const childrenArray = Children.toArray(children);\n    const estimatedNumberOfGroupRows = childrenArray.length / currentColumnCount;\n    for (let i = 0; i < estimatedNumberOfGroupRows; i++) {\n      rows[i] = childrenArray.slice(i * currentColumnCount, i * currentColumnCount + currentColumnCount);\n    }\n\n    const maxRowsPerRow: number[] = [];\n    rows.forEach((rowGroup: ReactElement[], rowIndex) => {\n      const numberOfRowsOfEachForm = rowGroup.map((row) => {\n        if ((row.type as any).displayName === 'FormItem') {\n          return 1;\n        }\n        return Children.count(row.props.children) + 1;\n      });\n\n      maxRowsPerRow[rowIndex] = Math.max(...numberOfRowsOfEachForm);\n    });\n\n    let totalRowCount = 2;\n\n    rows.forEach((column: ReactElement[], rowIndex) => {\n      const rowsForThisRow = maxRowsPerRow[rowIndex];\n      column.forEach((cell, columnIndex) => {\n        const titleStyles: CSSProperties = {\n          gridColumnEnd: 'span 12',\n          gridColumnStart: columnIndex * 12 + 1,\n          gridRowStart: totalRowCount,\n          display: 'flex',\n          alignItems: 'center',\n          fontFamily: ThemingParameters.sapFontFamily,\n          height: CssSizeVariables.sapWcrFormGroupTitleHeight,\n          lineHeight: CssSizeVariables.sapWcrFormGroupTitleHeight,\n          color: ThemingParameters.sapTextColor,\n          fontSize: ThemingParameters.sapFontSize,\n          fontWeight: 'bold',\n          margin: 0,\n          paddingTop: '1rem'\n        };\n\n        if (cell?.props?.titleText) {\n          computedFormGroups.push(\n            <h6\n              style={titleStyles}\n              title={cell.props.titleText}\n              aria-label={cell.props.titleText}\n              key={`title-col-${columnIndex}-row-${totalRowCount}`}\n            >\n              {cell.props.titleText}\n            </h6>\n          );\n        }\n\n        for (let i = 0; i < rowsForThisRow; i++) {\n          const itemToRender =\n            (cell.type as any).displayName === 'FormGroup'\n              ? Children.toArray(cell.props.children)[i]\n              : (cell.type as any).displayName === 'FormItem' && i === 0\n              ? cell\n              : null;\n\n          if (itemToRender) {\n            computedFormGroups.push(\n              cloneElement(itemToRender as ReactElement, {\n                key: `col-${columnIndex}-row-${totalRowCount + i}`,\n                columnIndex,\n                lastGroupItem: (cell.type as any).displayName === 'FormGroup' && rowsForThisRow - 2 === i,\n                rowIndex: totalRowCount + i + 1,\n                labelSpan: currentLabelSpan\n              })\n            );\n          }\n        }\n      });\n      totalRowCount += rowsForThisRow;\n      if (rowsForThisRow === 1) {\n        totalRowCount += 1;\n      }\n    });\n\n    return [computedFormGroups, titleText];\n  }, [children, currentRange, titleText, currentNumberOfColumns, currentLabelSpan]);\n\n  const formClassNames = clsx(\n    classes.form,\n    classes[`labelSpan${((currentLabelSpan - 1) % 12) + 1}`],\n    classes[backgroundDesign.toLowerCase()],\n    className\n  );\n\n  const CustomTag = as as ElementType;\n  return (\n    <CustomTag\n      ref={componentRef}\n      slot={slot}\n      className={formClassNames}\n      style={style}\n      data-columns={currentNumberOfColumns}\n      {...rest}\n    >\n      {updatedTitle && (\n        <Title level={TitleLevel.H3} className={classes.formTitle}>\n          {updatedTitle}\n        </Title>\n      )}\n      {formGroups}\n    </CustomTag>\n  );\n});\n\nForm.displayName = 'Form';\n\nForm.defaultProps = {\n  as: 'form',\n  backgroundDesign: FormBackgroundDesign.Transparent,\n  columnsS: 1,\n  columnsM: 1,\n  columnsL: 1,\n  columnsXL: 2,\n  labelSpanS: 12,\n  labelSpanM: 2,\n  labelSpanL: 4,\n  labelSpanXL: 4\n};\n\nexport { Form };\n","import { CssSizeVariables, ThemingParameters } from '@ui5/webcomponents-react-base';\nimport React, { FC, ReactNode } from 'react';\nimport { createUseStyles } from 'react-jss';\n\nexport interface FormGroupPropTypes {\n  /**\n   * Title of the FormGroup.\n   */\n  titleText: string;\n  /**\n   * Content of the FormGroup.\n   *\n   * __Note:__ Although this prop accepts all HTML Elements, it is strongly recommended that you only use `FormItem` in order to preserve the intended design.\n   */\n  children: ReactNode | ReactNode[];\n}\n\nconst useStyles = createUseStyles(\n  {\n    title: {\n      gridColumn: 'span 12',\n      display: 'flex',\n      alignItems: 'center',\n      height: CssSizeVariables.sapWcrFormGroupTitleHeight,\n      lineHeight: CssSizeVariables.sapWcrFormGroupTitleHeight,\n      fontFamily: ThemingParameters.sapFontHeaderFamily,\n      color: ThemingParameters.sapGroup_TitleTextColor,\n      fontSize: ThemingParameters.sapFontHeader6Size,\n      fontWeight: 'bold',\n      margin: 0,\n      marginBlockStart: '1rem'\n    },\n    spacer: { height: '1rem', gridColumn: 'span 12' }\n  },\n  { name: 'FormGroup' }\n);\n/**\n * The `FormGroup` encapsulates `FormItems` into groups.\n * __Note:__ `FormGroup` is only used for calculating the final layout of the `Form`, thus it doesn't accept any other props than `heading` and `children`, especially no `className`, `style` or `ref`.\n */\nconst FormGroup: FC<FormGroupPropTypes> = (props: FormGroupPropTypes) => {\n  const { titleText, children } = props;\n\n  const classes = useStyles();\n\n  return (\n    <>\n      <h6 className={classes.title} title={titleText} aria-label={titleText} data-component-name=\"FormGroupTitle\">\n        {titleText}\n      </h6>\n      {children}\n      <span className={classes.spacer} />\n    </>\n  );\n};\n\nFormGroup.displayName = 'FormGroup';\n\nexport { FormGroup };\n","'use client';\n\nimport React, { cloneElement, CSSProperties, FC, isValidElement, ReactElement, ReactNode } from 'react';\nimport { createUseStyles } from 'react-jss';\nimport { FlexBoxAlignItems, FlexBoxDirection, WrappingType } from '../../enums';\nimport { Label, LabelPropTypes } from '../../webComponents/Label';\nimport { FlexBox } from '../FlexBox';\n\nexport interface FormItemPropTypes {\n  /**\n   * Label of the FormItem. Can be either a string or a `Label` component.\n   */\n  label?: string | ReactElement;\n  /**\n   * Content of the FormItem. Can be an arbitrary React Node.\n   */\n  children: ReactNode | ReactNode[];\n}\n\ninterface InternalProps extends FormItemPropTypes {\n  columnIndex?: number;\n  labelSpan?: number;\n  rowIndex?: number;\n  lastGroupItem?: boolean;\n}\n\nconst CENTER_ALIGNED_CHILDREN = new Set(['CheckBox', 'RadioButton', 'Switch', 'RangeSlider', 'Slider']);\n\nconst useStyles = createUseStyles(\n  {\n    label: {\n      gridColumnEnd: 'span var(--ui5wcr_form_label_span)',\n      justifySelf: 'var(--ui5wcr_form_label_text_align)',\n      textAlign: 'var(--ui5wcr_form_label_text_align)'\n    },\n    content: {\n      display: 'flex',\n      gridColumnEnd: 'span var(--ui5wcr_form_content_span)'\n    }\n  },\n  { name: 'FormItem' }\n);\n\nconst renderLabel = (label: ReactNode, classes: Record<'label' | 'content', string>, styles: CSSProperties) => {\n  if (typeof label === 'string') {\n    return (\n      <Label className={classes.label} style={styles} wrappingType={WrappingType.Normal}>\n        {label ? `${label}:` : ''}\n      </Label>\n    );\n  }\n\n  if (isValidElement(label)) {\n    const { showColon, wrappingType, className, style, children } = label.props;\n    return cloneElement<LabelPropTypes>(\n      label,\n      {\n        showColon: showColon ?? true,\n        wrappingType: wrappingType ?? WrappingType.Normal,\n        className: `${classes.label} ${className ?? ''}`,\n        style: {\n          gridColumnStart: styles.gridColumnStart,\n          gridRowStart: styles.gridRowStart,\n          ...(style || {})\n        }\n      },\n      children ?? ''\n    );\n  }\n\n  return null;\n};\n/**\n * The `FormItem` is only used for calculating the final layout of the `Form`, thus it doesn't accept any other props than `label` and `children`, especially no `className`, `style` or `ref`.\n */\nconst FormItem: FC<FormItemPropTypes> = (props: FormItemPropTypes) => {\n  // eslint-disable-next-line react/prop-types\n  const { label, children, columnIndex, rowIndex, labelSpan, lastGroupItem } = props as InternalProps;\n\n  const classes = useStyles();\n\n  const gridColumnStart = (columnIndex ?? 0) * 12 + 1;\n  const gridRowStart = rowIndex ?? 0;\n\n  const contentGridColumnStart =\n    columnIndex != null ? (labelSpan === 12 ? gridColumnStart : gridColumnStart + (labelSpan ?? 0)) : undefined;\n\n  if (labelSpan === 12) {\n    return (\n      <FlexBox\n        direction={FlexBoxDirection.Column}\n        alignItems={FlexBoxAlignItems.Start}\n        style={{\n          gridColumnStart,\n          gridRowStart,\n          gridColumnEnd: 'span 12',\n          placeItems: 'flex-start',\n          paddingBottom: '0.625rem'\n        }}\n      >\n        {renderLabel(label, classes, { paddingBottom: '0.25rem' })}\n        {children}\n      </FlexBox>\n    );\n  }\n\n  const inlineLabelStyles = () => {\n    const styles = { gridColumnStart, gridRowStart, paddingBottom: lastGroupItem ? '1rem' : 0 };\n    if (CENTER_ALIGNED_CHILDREN.has((children as any)?.type?.displayName)) {\n      return {\n        ...styles,\n        alignSelf: 'center'\n      };\n    }\n    return styles;\n  };\n  const calculatedGridRowStart = labelSpan === 12 ? gridRowStart + 1 : gridRowStart;\n  return (\n    <>\n      {renderLabel(label, classes, inlineLabelStyles())}\n      <div\n        data-grid-column-start={contentGridColumnStart}\n        data-grid-row-start={calculatedGridRowStart}\n        className={classes.content}\n        style={{\n          gridColumnStart: contentGridColumnStart,\n          gridRowStart: calculatedGridRowStart,\n          paddingBottom: lastGroupItem ? '1rem' : 0\n        }}\n      >\n        {children}\n      </div>\n    </>\n  );\n};\n\nFormItem.displayName = 'FormItem';\n\nexport { FormItem };\n"],"names":["FormBackgroundDesign","labelSpanClasses","styleClasses","i","styles","ThemingParameters","clonedChildrenForSingleColumn","reactChildren","currentLabelSpan","Children","child","_a","cloneElement","_b","useStyles","createUseStyles","Form","forwardRef","props","ref","as","backgroundDesign","children","columnsS","columnsM","columnsL","columnsXL","className","labelSpanS","labelSpanM","labelSpanL","labelSpanXL","slot","titleText","style","rest","columnsMap","labelSpanMap","componentRef","formRef","useSyncRef","currentRange","setCurrentRange","useState","Device.getCurrentRange","lastRange","useRef","useEffect","observer","form","rangeInfo","classes","currentNumberOfColumns","formGroups","updatedTitle","useMemo","computedFormGroups","singleChild","currentColumnCount","rows","childrenArray","estimatedNumberOfGroupRows","maxRowsPerRow","rowGroup","rowIndex","numberOfRowsOfEachForm","row","totalRowCount","column","rowsForThisRow","cell","columnIndex","titleStyles","CssSizeVariables","jsx","itemToRender","formClassNames","clsx","jsxs","Title","TitleLevel","FormGroup","Fragment","CENTER_ALIGNED_CHILDREN","renderLabel","label","Label","WrappingType","isValidElement","showColon","wrappingType","FormItem","labelSpan","lastGroupItem","gridColumnStart","gridRowStart","contentGridColumnStart","FlexBox","FlexBoxDirection","FlexBoxAlignItems","inlineLabelStyles","calculatedGridRowStart"],"mappings":"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"}